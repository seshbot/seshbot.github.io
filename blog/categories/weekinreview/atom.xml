<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: WeekInReview | Seshbot Programs]]></title>
  <link href="http://seshbot.com/blog/categories/weekinreview/atom.xml" rel="self"/>
  <link href="http://seshbot.com/"/>
  <updated>2014-02-22T13:27:05+09:00</updated>
  <id>http://seshbot.com/</id>
  <author>
    <name><![CDATA[Paul Cechner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Week in Review: Making Games]]></title>
    <link href="http://seshbot.com/blog/2014/02/22/week-in-review-making-games/"/>
    <updated>2014-02-22T10:35:00+09:00</updated>
    <id>http://seshbot.com/blog/2014/02/22/week-in-review-making-games</id>
    <content type="html"><![CDATA[<p>I have once again bitten off a whole lot &ndash; I started making a game based on my fairly limited knowledge of how such things are done, and have found it very difficult to take a moment to distill my thoughts. In fact it has been nearly impossible as I have been constantly unsure of whether the approach I&rsquo;m taking is actually going to pay off in the long run!</p>

<p>This is just a catch-up on my experiences over the last few weeks, a few discoveries and surprises, and perhaps my plans for the immediate future. I decided at the last moment to include a screenshot here, but I&rsquo;m sure we&rsquo;ve all seen brown circles on green backgrounds before&hellip;</p>

<p><img src="/images/upload/2014-02-22-game-screenshot.png" title="&ldquo;This is a 100m section of a 10km world&rdquo;" ></p>

<p>I also created a (low framerate) <a href="/images/upload/2014-02-22-game-early.gif">animated gif</a> of this in action.</p>

<!-- more -->


<p></p>

<h2>Making a game/engine</h2>

<p>The general advice people give new game developers is to never make a game engine &ndash; focus on just getting your game concept out. I will largely be ignoring this advice because I don&rsquo;t have a specific idea for a game yet, just a general notion that it will be client/server and a kind of town-builder. Based on this alone I believe that careful work now will be necessary to ensure the scale of the world I have in mind will be possible &ndash; the virtual world will almost certainly need
geo-spatial partitioning to ensure location-based entity lookups and collision detections can be performed in decent time, and because only a small portion of the virtual world will likely be viewed, and likely only viewed in a separate client application altogether, there is no reason to have the core game logic mixed in with rendering logic at all.</p>

<h3>Modularity and the basic framework</h3>

<p>I intend to write a separate article on this, but I actually spent a lot of time trying to bring some of the nicer IOC container abstractions I&rsquo;ve grown used to in .Net and Java to my C++ environment. This largely involves run-time type identification (RTTI) which is often considered anathema in C++, but I am confident that it is a good direction to go in, provided it is used judiciously.</p>

<p>I decided on four core high-level abstractions:</p>

<ul>
<li><em>services</em> are the core contracts that different sections of code use to communicate with each other. If you want to work with the weather, get yourself a hold of the weather service</li>
<li><em>commands</em> are messages sent into the application as a whole from outside &ndash; services can advertise which commands they can respond to, and the client application can bind keys or whatever to these commands. This abstraction is probably more focused on games</li>
<li><em>modules</em> provide concrete implementations of a bunch of specifically configured services and expose commands. The application mainline only interacts with modules &ndash; it starts them up and shuts them down, and the modules provide all the functionality of the application</li>
<li><em>message bus</em> provides singleton channels for application-wide cross-cutting concerns. I have not yet found a particular use for this, but intend to use it for sending &lsquo;hints&rsquo; out that have no true affect on the state of the application, such as <em>dump debug information now</em>.</li>
</ul>


<p>The central idea is that different abstract concepts such as geography, creature behaviour, economy, weather, client UI etc are all provided by separate modules. When started up, a module can publish services they provide and consume services provided by other modules via a &lsquo;service locator&rsquo;. It is very important that the &lsquo;service locator&rsquo; is only used by the high-level module code directly to ensure they&rsquo;re not used to hide globals and introduce crazy interdependencies. The module creation
mechanism provides a fluid dependency syntax that ensure each module is initialised after the modules on which it depends (i.e., publishes services which this module consumes.)</p>

<p>I created a core library (I named <code>pcx</code> after my own initials and the letter &lsquo;x&rsquo; which is super cool) that I intend to be useful as a general-purpose C++ library for anyone wanting to add these concepts to their own application.</p>

<h3>Deciding on core abstractions</h3>

<p>I&rsquo;ve been thinking about making a game for a long long time now, and have had a myriad of thoughts on how I would create all the major abstractions, modularise the code, and manage multiple clients, network latency, sharding, etc. But when I actually sat down and put hands to keyboard, the first problems I ran into were hugely and unexpectedly daunting &ndash; how should position and rotation be stored? And time? Should position be a vector of floating point numbers or integers? And
should velocity be another vector, or polar coordinates (rotation and magnitude). Should rotation be implicit from velocity, or should entities be able to face one direction but move in another?</p>

<p>These are all decisions that will affect the application in almost every way, and doubtless create deep-seeded performance and functionality trade-offs, and as this is my first game I wasn&rsquo;t really sure what those might be. For example, if I choose to represent velocity as a vector (x, y components), then I lose the ability to determine the direction a stationary unit is facing ([0,0] gives no information in that aspect). Polar coordinates do not suffer this problem however. But the
calculation for moving an entity with cartesian vector velocities is so trivial! Just <code>newPos = pos + velocity * time</code>&hellip; It&rsquo;s very tempting to go with that!</p>

<p>And if I store latitude/longitude of an entity as floating point numbers, I expect I might run into rounding problems with entities far from the origin point. Or when comparing entities close to the origin with those far from the origin. But floating point numbers allow me to say &lsquo;all distances are in meters&rsquo; which makes thinking about and configuring the application that much easier for me.</p>

<p>In the end I kind of arbitrarily chose to store locations and velocities as vectors of doubles, and will probably store a &lsquo;facing direction&rsquo; as a float in radians. Real-time time is likewise a double, indicating fractions of a second. I have not yet implemented any concept of in-game time however.</p>

<h3>Discovering engine capabilities</h3>

<p>I quickly found it very important to keep a close eye on the performance impact of all my decisions as well. It was quite exciting to get my original simple framework up (a &lsquo;world&rsquo; module that holds all the entities and their locations/momentums in the game) and determine the maximum number of visible entities it could support. I found it started dropping frames at around 40,000 moving entities in the world, but I quickly realised however that I have no idea what a good number is &ndash; how many entities <em>should</em> it be able to support?</p>

<p>Most engines I&rsquo;ve looked at (e.g., Quake and Source engines) suport the low 1000&rsquo;s of entities, but most of those are client-only frameworks. I couldn&rsquo;t find a lot of info on MMOs (not that I&rsquo;m making an MMO but I would like to get a feel for scale), and could only find indirect references to EVE online supporting <a href="http://www.gamasutra.com/view/feature/132563/infinite_space_an_argument_for_.php?page=2">up to 30K entities in some of their major battles</a>, but they apparently do all sorts of crazy stuff to support that such as slowing down time and moving entities not directly involved out onto other shards.</p>

<p>In the end it&rsquo;s all moot however, as my game is still very trivially implemented and is not a real-world example of how it will eventually work. For one, all moving entities in the world just walk in an anti-clockwise circle and don&rsquo;t look at the world around them (this will add a lot of complexity to say the least!). Secondly, the game currently updates every entity in the game 60 times per second. I should definitely make entities further from the player &lsquo;stupider&rsquo; and less
frequently updated, and there is actually no good reason to update all entities 60 times per second anyway &ndash; that number was chosen because that is the framerate of the GUI and I have currently tightly bound the world update logic to the core game loop. I will be decoupling these soon.</p>

<p>I have found it&rsquo;s very interesting to keep a good feel for the performance of the application as I work on its foundation &ndash; every time I make a significant modification I run it with varying conditions and check how it performs relative to previous iterations. This has led to some interesting discoveries regarding performance of iterators and iterator adapters, and some very puzzling edge-cases where the Clang optimiser seems to suddenly start borking. But more on that some other time.</p>

<p>The &lsquo;modules&rsquo; abstraction is really helpful in monitoring performance &ndash; the core game loop just iterates over each module, effectively saying <code>for each module m, m.update(timeSinceLastUpdate)</code>. I put a basic metrics counter around this tight loop and get some pretty useful output that shows how many milliseconds each module consumes per tick:</p>

<p><code>bash Stats are dumped to standard output ever second
Job time accumulations in 1000ms:
 -               client - 60 ticks, avg: 0ms max: 0 total: 0ms (0%)
 -                 mobs - 60 ticks, avg: 0ms max: 3 total: 9ms (27%)
 -                props - 60 ticks, avg: 0ms max: 0 total: 0ms (0%)
 -                world - 60 ticks, avg: 0ms max: 0 total: 23ms (72%)
 -      render entities - 58 ticks, avg: 5ms max: 8 total: 339ms
 -   update all modules - 58 ticks, avg: 0ms max: 3 total: 33ms
</code></p>

<p>From this output it is obvious that the &lsquo;render entities&rsquo; step is taking a long time &ndash; I should really investigate this!</p>

<h3>C++ development experiences</h3>

<p>Regarding the choice of C++ as a language, it is sometimes a boon and often times a bane. The absolute major pain I&rsquo;m trying to avoid is massive compile and link times. These can only be mitigated through careful control of modularity and inter-dependencies. This is something one should struggle to achieve in any case, but it is constantly undermined by the use of templates and libraries that use templates.</p>

<p>And the Eigen C++ matrix library seemed like a good choice, but it comes with a harrying legacy &ndash; it prefers to use special high-performance instruction sets available on some machines that require your objects to be defined in a certain way (with special alignment specifications when memory is allocated.) These are known as <a href="http://eigen.tuxfamily.org/dox-devel/group__TopicFixedSizeVectorizable.html">fixed-sized vectorisable</a> types and can cause segmentation faults if used incorrectly. Fixed-size vectorisable types cannot be passed by-value to functions or methods, and all classes that contain
such types must themselves specially override the <em>new</em> operator to ensure these alignment requirements are maintained. And STL classes that contain these types must take this into account, so Eigen provides its own implementation of the STL vector that you must use. PLUS all of these restrictions apply to types that you create that have eigen members, and I think also to classes that aggregate THOSE types! It is a huge pain in the ass if you like creating abstract interfaces, to say the least.</p>

<p>I suspect that Eigen will cause all sorts of problems when I move to Windows, so I want to try that out sooner rather than later. The special vectorisation can be disable at compile time but I&rsquo;d rather see if it causes problems first.</p>

<h2>Qt Creator and CMake</h2>

<p>I was originally going to go with XCode for development on OSX &ndash; I&rsquo;d really love to learn how to use that well as it seems quite different to most other editors and not intuitive for me. Ultimately however I decided against it because it doesn&rsquo;t work well with CMake (I think I would have to constantly be re-loading the project) and, at the time anyway, I was thinking that I really wanted to work with QT Quick and other Qt technologies.</p>

<p>So I decided to go with Qt Creator as a development IDE. It is certainly a huge pleasure to use, and has more than the usual amount of high-level functionality one would expect in a C++ development environment. As a bonus it has fairly decent integration with CMake &ndash; the only missing aspect here is that it doesn&rsquo;t allow you to easily add files to your CMake project, but I have made a few tools that allow me to do this easly from the command prompt (more below.)</p>

<p>The main problem I&rsquo;ve had so far is that in order to use the latest C++11 functionality I went with Clang over GCC as a compiler. While Qt Creator supports this, it still seems to try to use the GDB and GProf etc for debugging and profiling, which don&rsquo;t work with Clang. I am going to spend some time soon figuring out how to fix this, but it seems to involve creating a new &lsquo;kit&rsquo; that defines which dev tools the IDE should invoke. It seems complicated however&hellip;</p>

<h2>OSX Development</h2>

<p>I really enjoy working on OSX &ndash; it has all the goodness of a good linux development environment along with some really smooth apps.</p>

<p>One of the worst aspects of Windows development is the extremely weak command line environment. The history of the command line shell (MS-DOS prompt) still seems mired in its QDOS (Quick and Dirty Operating System) origins from the very early &lsquo;80s. While it supports basic pipes and has a few commands like <code>find</code> and&hellip; erm&hellip; anyway, while it has some limited functionality available, it is not a scratch on the highly evolved GNU/Linux environment that has been continually improved over
the last 30 years or so. If you want a tool that does anything moderately complex in Windows you need to find one on the internet generally, whereas in Linux there is no limit to what can be accomplished with <code>sed</code>, <code>grep</code>, <code>find</code>, <code>cut</code>, <code>awk</code>, <code>tr</code> and the like.</p>

<p>For instance, one real annoying aspect of C++ development for me has always been the relative difficulty of creating new projects. Java IDEs can easily provide the ability to create new projects and packages through a simple right-click in your project tree, because Java is very opinionated about where such files go. C++ just requires the symbols to <em>exist</em> at link time, so they could come from anywhere, and there are limitless conventions about how to manage header files in your filesystem.</p>

<p>I have my own conventions for managing my hierarchy of source and header files, and decided to create template projects and modules (my own abstraction for this project) and create shell scripts that allow me to set up entirely new projects with a simple <code>x.new-module thing Thing</code>, which will create all the necessary headers, source files and CMake files, with default sensible names and namespaces, and include them into my current project. This would have been a nightmare to put together
in Windows but has been trivial in OSX.</p>

<h2>Next steps</h2>

<p>I recently added the all-important geo-spatial partitioning in a very simple way, but this seemed to cause some significant performance penalties. I have decided to take the plunge and figure out how to get the profiler working properly with Qt Creator to help me investigate this, because working on a large project without a profiler is like driving a car with a map but no windows &ndash; it&rsquo;s hard to tell if you&rsquo;re still on the road.</p>

<p>I really want to get some graphics in there but I have no experience with that, so am considering messing around with shaders to see if I can get a good lighting model in there first. This should really help me figure out the environmental aesthetic I&rsquo;m going for.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Week in Review: Pausing Web App, Starting C++ App]]></title>
    <link href="http://seshbot.com/blog/2014/02/03/week-in-review-pausing-web-app/"/>
    <updated>2014-02-03T07:52:52+09:00</updated>
    <id>http://seshbot.com/blog/2014/02/03/week-in-review-pausing-web-app</id>
    <content type="html"><![CDATA[<p>Just over a week ago I decided to put down my web tools for a while and move to working in an environment in which I&rsquo;m much more comfortable &ndash; C++. I will definitely pick up the &lsquo;Table Top&rsquo; app (or whatever it turns into) again soon but I felt the need to do work that resulted in a more <em>tangible</em> product.</p>

<p>Over the last few weeks I&rsquo;ve had a growing realisation that the foundation of web programming is still immature, and I am doubting the value in investing too much time learning the high-level technologies. I am not really one for learning frameworks in general actually &ndash; I much prefer learning languages and idioms &ndash; and modern web programming is all about rapidly changing high-level frameworks.</p>

<p>That said however, I feel that I&rsquo;m finally at a point where I can start making useful stuff in Ember and Rails without feeling like I&rsquo;m misusing the tools or spending most of my time in Google. So last week I knocked off a few high-level features in my app to show the basic scaffolding I was considering (it only took a few hours in the end!), and then set it aside.</p>

<p><img class="center" src="/images/upload/2014-02-03-seshbot-framework.png" title="&ldquo;Game Table App as of Feb 2014 &ndash; still doesn&rsquo;t do much&rdquo;" ></p>

<p>There is a very duct-tape and chicken-wire feel to web technologies, but once you&rsquo;re familiar with the tech you can pump stuff out pretty quickly. Because of the immediate and ethereal nature of the web it can be a fantastic way of creating a product that is immediately globally available. All of the magic we see however is still largely magic however, and magic doesn&rsquo;t bode well in any application. The web as a platform for applications is still unbaked and young, and I feel that unless you&rsquo;re forging new territory on the frontier you&rsquo;re probably working with technologies that won&rsquo;t be interesting in a few years time.</p>

<!-- more -->


<h2>The Web as a Software Platform</h2>

<p>HTTP, HTML, JavaScript and CSS have been around for a while now, so why have all the useful standards for building proper web applications (like WebGL, WebSockets, local storage, drag-and-drop and all those other HTML5 goodies) only started coming along recently?</p>

<p>It turns out that for a long time web standards were committee-driven by a group of beard-stroking high-falutin non-visionaries called W3C. I still recall fairly recent times when the latest advances in the web were all about creating HTML that was also standards-conforming XML for some reason (so that perhaps machines could deal with it more easily or something?) and very little practical advancement was being made. (Side note: the same thing seems to be happening with OAuth, which is a morass of unproven ideas and conflicting ideals.)</p>

<p>At some stage however another working group arose called <a href="http://en.wikipedia.org/wiki/WHATWG">WHATWG</a>, formed of people that were actually interested in pushing practical new technologies onto the web, and they pretty much ignored the W3C&rsquo;s direction.</p>

<p>The WHATWG formed in 2004 in response to the stagnating web standards, and in 2007 the W3C finally got on board and standardised HTML5 based on a whole bunch of the WHATWG&rsquo;s tools. They pretty much totally abandoned their whole XHTML thing, which I don&rsquo;t think anyone really regrets.</p>

<p>All of a sudden there have been bursts of innovation on the web, but without a fully baked platform on which to create them. So all these high-level frameworks have temporarily filled the gaps while the HTML spec catches up. In fact, Google&rsquo;s Angular framework (an alternative to Ember.js) has the explicit goal of becoming obsolete when Google manages to get their tools into the standard &ndash; it&rsquo;s a kind of proof-of-concept of Google&rsquo;s vision for client-side application development.</p>

<p>I chose Ember because if you&rsquo;re going with a framework, you might as well go with one that provides abstractions that make sense to you. But I don&rsquo;t have high hopes for it&rsquo;s long-term availability as the web matures, and so feel that there is limited long-term value in becoming some kind of Ember guru.</p>

<h2>My Web App</h2>

<p>The current proof of concept is at <a href="http://seshbot.herokuapp.com.">http://seshbot.herokuapp.com.</a> It still doesn&rsquo;t have the meat in it but it has the authentication, some mobile-friendliness, and sorta models the notions of &lsquo;games&rsquo; and &lsquo;players&rsquo; in games.</p>

<p>I was much surprised to find out that there is not much of a story yet for how to provide a real-time connection between the backend and the Ember application, where updates on the server are actively pushed out to the client. This is probably the next big thing I&rsquo;ll have to do &ndash; create an adapter that connects to the server (probably using server-side events and one of the <a href="http://www.sitepoint.com/streaming-with-rails-4/">Rails4 streaming APIs</a>) and injects incoming updates into the model using the Ember Data API, similar to the <a href="https://github.com/thomasboyt/ember-firebase-adapter">EmberFire Firebase library</a>.</p>

<p>Other than that, the two remaining things I can think of are: making it look like a gaming application (nice rose-wood tabletop look or something?) and adding a few components that I want to have in there like a chat client, a dice area and some kind of card game. This is the nice bit where I get to play around with things, I&rsquo;m looking forward to experimenting with the interactivity side of things, perhaps dragging cards around or having some sound built into it.</p>

<p>I have put this aside however because I don&rsquo;t want to burn out on it. I think it&rsquo;s time to take a break so that I can come back with a fresh set of eyes &ndash; perhaps I&rsquo;ll decide it&rsquo;s not worth continuing at all in lieu of some other app.</p>

<h2>New C++ App</h2>

<p>I&rsquo;ve been wanting to mess around with C++11 for a long time now, and have made a lot of little sample applications that allow me to get a feel for it. I really want to try creating a real application that is:</p>

<ul>
<li>cross platform</li>
<li>uses built-in C++11 stuff like chrono, threads, lambdas, auto etc</li>
<li>provides a few services I&rsquo;ve come to enjoy in newer languages such as dependency containers (if feasible!)</li>
<li>allows me to experiment with GL shaders, which I&rsquo;ve wanted to play with for <em>years</em>.</li>
</ul>


<p>So I spent a few days writing a basic app in <a href="https://qt-project.org/wiki/Category:Tools::QtCreator">QT Creator</a> using <a href="http://www.cmake.org/">CMake</a> as the build system. There were a few hurdles but it didn&rsquo;t take long to get up and running. Because I&rsquo;m limiting myself to core C++, boost and a couple of cross-platform libraries (<a href="http://www.sfml-dev.org/">SFML</a> for graphics and <a href="http://eigen.tuxfamily.org/index.php?title=Main_Page">Eigen</a> for linear algebra stuff) it&rsquo;s still pretty versatile. And because I&rsquo;m using CMake I&rsquo;ll be able to use Visual Studio to develop in Windows and QT Creator or XCode or whatever I want in OSX. I&rsquo;ll try to stick with QT Creator where possible though for consistency.</p>

<p><img class="center" src="/images/upload/2014-02-03-qtcreator.png" title="&ldquo;QT Creator actually looks pretty nice&rdquo;" ></p>

<p>I am a bit worried about Windows compatability &ndash; Visual C++ has always lagged behind in standards conformance, but they have picked up their pace somewhat in the recent future. I am avoiding some of the more esoteric stuff however, such as variadic templates, because of VC++.</p>

<p>I would also really like to try messing around with QML &ndash; Qt&rsquo;s DSL for writing GUI applications. It reminds me of WPF only in a much cleaner, less hacky way, with JavaScript capabilities built straight into it. Ideally I will figure out a way to use Qt Quick/QML seamlessly with the OpenGL stuff provided by SFML, though I am less optimistic about that. Previous experience tells me that you don&rsquo;t want to be re-creating GUI widget libraries because layout management is a complete bitch, but I think QML is still a bit young to work in arbitrary circumstances.</p>

<h2>Blogging</h2>

<p>I found it very difficult to blog about my experiences with Ember and Rails. There is a lot of stuff out there covering the same stuff I would cover, only terribly out of date. This made me feel that my posts too would just become so much flotsam on a sea of irrelevant minutiae.</p>

<p>The main value I was really getting though was as a reference for myself so I could close some of my browser tabs without worrying that I wouldn&rsquo;t be able to find that one piece of information again, and also so that I could distill my thoughts on something before putting it aside.</p>

<p>I have about 3 unpublished posts on my experience over the last few weeks &ndash; I&rsquo;ll probably put them together under one post about Ember development, but not for a little while now I&rsquo;m guessing.</p>

<p>I am much more certain of my opinion on C++ related matters, so I imagine that there will be a few long rants in that general direction coming up.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This week in review: my game table web app]]></title>
    <link href="http://seshbot.com/blog/2014/01/11/this-week-in-review-the-game-table-web-app/"/>
    <updated>2014-01-11T11:19:08+09:00</updated>
    <id>http://seshbot.com/blog/2014/01/11/this-week-in-review-the-game-table-web-app</id>
    <content type="html"><![CDATA[<p>First here&rsquo;s a quick summary of what I got up to:</p>

<ol>
<li>trying to build a simple &lsquo;gaming table&rsquo; application in Ember.js,</li>
<li>styling with Twitter bootstrap,</li>
<li>messing with plugins in my blog (trying unsuccessfully to fix code highlighting, and adding a UML tool &ndash; see below)</li>
</ol>


<p><center><img src='/images/plantuml/00178544eeee1acd089c0ec4883b3611.png'></center></p>

<p>I spent most of my time learning about Ember. <a href="http://emberjs.com">Ember.js</a> is a very nice looking front-end MVC framework that has a very appealing <a href="http://emberjs.com/guides/">getting started guide</a> that make it look <em>super simple</em> to create a reactive application. Three things that people will not tell you however:</p>

<ul>
<li>demo videos only ever show the main usage scenario of that framework</li>
<li>most new frameworks change so often that they&rsquo;re either unstable or very little up-to-date documentation exists, and</li>
<li>many of the benefits they offer you probably won&rsquo;t end up using anyway, for various reasons</li>
</ul>


<p>For now though I&rsquo;ll go ahead with it because I feel that I&rsquo;m just about to start doing cool stuff in it (it kinda always feels like this though.)</p>

<p><strong>Next week</strong> I&rsquo;m thinking of switching back to some C++ stuff so I can dabble in a realm I&rsquo;m more comfortable with for a while&hellip; Monday is a public holiday in Japan though so I&rsquo;ll probably be wandering around and not programming much.</p>

<!-- more -->


<h3>Problem 1: binding non-nested components was difficult</h3>

<p>I figured I would devote my first day last week to creating the framework for a small Gaming Table application. Perhaps just start off with a quick chat client or sketching app. I was not accounting however for the vagaries of modern web application development, and I ended up messing around with stupid little problems for most of the week. Looking back I feel it was quite frustrating overall &ndash; it seems that many of these new techs do not quite work as advertised, if at all.</p>

<p>Most tutorials and documentation will usually only tell you about one way to make an ember app &ndash; showing the details of a single entity or collection of entities of the same type at a time. Perhaps it might be some blogging application that lets you dig down into various blog entries, or perhaps it will involve showing all the tweets from a particular tweeter. Whatever the demo, I&rsquo;m sure it will show you how to explore <em>a single concept</em>.</p>

<p>The first thing I wanted to do was to show your online friends on the left side and allow you to create or enter an existing chat room. I immediately got stuck on a stupid little problem however that I stubbornly refused to get past, leading to several wasted days.</p>

<p>My specific problem was <em>how can I make the nav bar show the name of the current gaming table (kind of like a chat room), but show some placeholder message if I&rsquo;m not in a room</em>. The problem being that the region dedicated to showing information about the current table (players, cards etc) is not a descendent hierarchically of the nav bar.</p>

<p><center><img src='/images/plantuml/09385b523a9258b9f2b64d6596a93d8e.png'></center></p>

<p>Long story short, the correct way seems to involve: 1) modifying the &lsquo;Nav Bar&rsquo; controller to add a dependency to the &lsquo;Game Table&rsquo; controller; 2) add to the Nav Bar controller an alias or dynamic property pointing to the Game Table controller (this is conceptually the last table loaded); and 3) creating another dynamic property in the Nav Bar controller that is updated whenever <code>currentPath</code> is updated, and returns <code>null</code> if the route (<code>currentRouteName</code>) is no longer a table.</p>

<p>This might make sense, but it was a pain in the ass to discover. (Side note: I&rsquo;m working on a general &lsquo;getting to know Ember.js&rsquo; post that goes into a lot more detail on this so others tackling the same problem might not have to spend as long as I spent on it.)</p>

<p>Surround your pullquote like this {" text to be quoted "}</p>

<p>I&rsquo;m concerned that the Ember docs might not cover enough real world scenarios that &lsquo;proper&rsquo; applications might encounter (e.g., several regions dedicated to different information.)</p>

<h3>Live Help in IRC! 1980&rsquo;s tech to the rescue</h3>

<p>The IRC channel is pretty awesome &ndash; the #emberjs channel of freenode.org is one of the most populated channels on the server, and I&rsquo;ve saved a lot of time by asking for help there.</p>

<p>I spent a long time digging through documentation on how to solve this problem before I turned to IRC. Then within 10 minutes I had someone giving me meaningful advice that I ended up using. The secret was that I went in there with a minimalistic example of my problem that they could mark up and fix for me. <a href="http://jsbin.com/UzaFUZE/1/edit?html,js,output">Here&rsquo;s</a> the code I gave them and <a href="http://jsbin.com/UzaFUZE/4/edit?html,js,output">here&rsquo;s</a> what they gave me.</p>

<h3>Hosting a backend</h3>

<p>I have been mainly concentrating on the front end functionality so far, so didn&rsquo;t want to spend too long messing around with the server side. I had originally decided that I&rsquo;d learn some rails, but decided to try out a &lsquo;no backend&rsquo; solution &ndash; in this case <a href="http://deployd.com">deployd</a>. The two criteria I was after were a simple REST API and some kind of authentication, both of which deployd ostensibly offers. There were a few hiccups though.</p>

<p>The first was that deployd is still actively being developed, so the web UI isn&rsquo;t totally intuative. I won&rsquo;t go too far into it but it has been a hassle.</p>

<p>The next problem is that although both Ember and Deployd declare that they speak standard REST JSON language, it turns out they don&rsquo;t agree on how that language should look. I had to mess around a fair amount and ask around on IRC before discovering that you need to apply your own serializer, that intercepts all remote data transfers and allows you to &lsquo;munge&rsquo; it a little into a format that Ember is happy with.</p>

<p>Again, I&rsquo;ll include the details of all this in a post dedicated to Ember later.</p>
]]></content>
  </entry>
  
</feed>
