<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ember | Seshbot Programs]]></title>
  <link href="http://seshbot.com/blog/categories/ember/atom.xml" rel="self"/>
  <link href="http://seshbot.com/"/>
  <updated>2014-01-16T08:54:09+09:00</updated>
  <id>http://seshbot.com/</id>
  <author>
    <name><![CDATA[Paul Cechner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Creating a Rails + Ember app from scratch]]></title>
    <link href="http://seshbot.com/blog/2014/01/15/creating-a-rails-plus-ember-app-from-scratch/"/>
    <updated>2014-01-15T17:54:16+09:00</updated>
    <id>http://seshbot.com/blog/2014/01/15/creating-a-rails-plus-ember-app-from-scratch</id>
    <content type="html"><![CDATA[<p>Today I decided to wield my new Rails and Ember knowledge and&hellip; look into yet another new technology. I thought it would be helpful to have an online app to demonstrate the fruits of my labours, so am deploying a new app to <strong><a href="http://heroku.com">Heroku</a></strong>.</p>

<p>Heroku is an &lsquo;application platform&rsquo; in the cloud, meaning that you can push certain kinds of apps (written in Ruby, Python, Java and Node.js) and it will ensure all the correct infrastructure is in place. When you sign up you get to host one app for free so it&rsquo;s easy to try out.</p>

<p>Later I will probably move to <a href="http://aws.amazon.com">Amazon Web Services</a>, which really just provide you with a basic virtual machine in the cloud that you can do anything with, so that I can host multiple apps without paying money.</p>

<p>This post shows how I went through all steps, including setting up the PostgreSQL database on OSX, creating a skeleton Rails app, and deploying to Heroku. It is a culmination of having gone through several sources:</p>

<ul>
<li>much was taken from this useful step-by-step &lsquo;<a href="http://www.devmynd.com/blog/2013-3-rails-ember-js">Rails + Ember blog post</a>&rsquo; and this <a href="http://www.devmynd.com/blog/2013-10-live-on-the-edge-with-rails-ember-js">follow up post</a> that incorporates changes for newer versions of the frameworks.</li>
<li>when I got to the part involving installing the &lsquo;ember-rails&rsquo; gem, I found that the <a href="https://github.com/emberjs/ember-rails">ember-rails documentation</a> was pretty useful.</li>
<li>some of the Heroku stuff came from the <a href="https://www.codeschool.com/code_tv/heroku">Heroku Code School lesson</a> summary.</li>
</ul>


<!-- more -->


<h2>Choosing a database</h2>

<p>I was deciding between MongoDb and PostgreSQL. According to <a href="http://hammad.ca/experiments/2013/08/25/mongodb-vs-sql/">this article</a>, MongoDb offers flexibility when it comes to managing file assets in your database, while PostgreSQL is much more well established in existing hosting infrastructures (AWS and Heroku), so can make initial deployment much simpler. Mongo is also more amenable to schema changes because it&rsquo;s a NoSQL schema-less document database, but I think Rails is supposed to make schema changes easy anyway with the various <code>db:</code> commands.</p>

<p>For now I&rsquo;ll go with Postgres because I&rsquo;m as yet not very familiar with Heroku and want to make things easier on myself.</p>

<p>The following installation instructions came from a blog entry on <a href="http://ricochen.wordpress.com/2012/07/20/install-postgres-on-mac-os-x-lion-with-homebrew-howto/">installing PostgreSQL on OSX with HomeBrew</a>:
```bash Installing PostgreSQL on  OSX</p>

<h1>easiest if you have homebrew installed</h1>

<p>brew install postgresql</p>

<h1>ensure it starts up when your machine starts</h1>

<p>ln -sfv /usr/local/opt/postgresql/*.plist ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist
launchctl load ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist</p>

<h1>ensure you don&rsquo;t accidentally run the older version</h1>

<p>echo &lsquo;export PATH=/usr/local/bin:$PATH&rsquo; >> ~/.bash_profile &amp;&amp; . ~/.bash_profile</p>

<h1>create a database user for the application to use</h1>

<h1>(alternatively you should be able to run &lsquo;createuser -d myapp&rsquo;)</h1>

<p>psql postgres <code>whoami</code>
create role myapp with CREATEDB login password &lsquo;password1&rsquo;;
```</p>

<p><em>Notes:</em></p>

<ul>
<li><em>the <code>createuser</code> command can replace the <code>psql</code> command stuff: <code>createuser -d myapp</code></em></li>
<li><em>if the DB username is different to the application name (below) you&rsquo;ll need to change the rails configuration later so it knows which username to use</em></li>
<li><em>I assume Heroku doesn&rsquo;t require you to manage the database at all</em></li>
</ul>


<h2>Creating a simple Rails app</h2>

<p>Creating a Rails app is really simple <em>once you know the commands</em>. So from scratch, if you include all the learning involved behind each command, it&rsquo;s actually not very simple. But these steps make it simple for me.</p>

<p>TIPS: I read somewhere that you should always run <code>bundle exec</code> before running a rails command to ensure that you&rsquo;re only working with gems in your Gemfile. Technically you could run all the commands below without prepending <code>bundle exec</code> however.</p>

<p><code>bash Creating the rails application framework
rails new myapp --database=postgresql
cd myapp
vim config/database.yml # set the database username and password, and on OSX un-comment the 'local' setting
bundle exec rake db:create
bundle exec rails generate scaffold Thing name:string
bundle exec rake db:migrate
bundle exec rails s
</code></p>

<p><em>Note: I had to uncomment the &lsquo;local&rsquo; setting from my </em>database.yml<em> file because rails couldn&rsquo;t connect due to permission problems on the local socket file. I could have reconfigured postgres instead but meh.</em></p>

<p>OSX users can also use <a href="http://pow.cx/">POW!</a> or <a href="http://anvilformac.com/">Anvil</a> (which uses POW! under the covers) to set up a fake URL pointing to their local rails app directories, so in my case I can visit <a href="http://myapp.dev">http://myapp.dev</a> and it will actually show me the app running on my local machine. It makes the testing cycle a lot quicker.</p>

<p>Add some simple static content:
<code>bash Generate some simple content in the Rails app
rails generate controller StaticPages home about --no-test-framework
</code></p>

<p>Now you should be able to visit <code>localhost:3000/static_pages/home</code> and see a generic message.</p>

<!-- x_ -->


<h3>Check in to git</h3>

<p>This creates a local git repository, but during the heroku deployment step I&rsquo;ll push it over there too. I&rsquo;ll also push it to GitHub when it looks like more of an app. So in git parlance, this is what I&rsquo;ll have on my local machine:</p>

<p><center><img src='/images/plantuml/7ff3365c0f4bc5f7e2db66419707938a.png'></center></p>

<p><code>bash Create the local 'master' git repository
rake tmp:clear
git init .
git add -f *
git commit -a -m"Initial commit"
</code></p>

<p>I regularly run those <code>git</code> commands to make it easier to revert any mistakes I happen to make.</p>

<h3>Adding ember framework</h3>

<p>Note that according to the <a href="https://github.com/emberjs/ember-rails">ember-rails docs</a> one may create the project using <code>rails new my_app -m http://emberjs.com/edge_template.rb</code> for a good start. I did not do this however.</p>

<p>One way to get started with ember with rails is to use the <code>ember-rails</code> gem. Just add <code>gem "ember-rails"</code> to your Gemfile, then run <code>rails generate ember:bootstrap</code> and you get a bunch of files. I also prefer to use javascript directly (as opposed to CoffeeScript, which is the default), so add <code>-g --javascript-engine js</code></p>

<p>Set &lsquo;developer mode&rsquo; (which enables developer-centric error messages and is apparently quite useful) by updating your <em>config/environments/development.rb</em> with: <code>config.ember.variant = :development</code>.</p>

<p>```bash Add a simple Ember application framework to the Rails app
vim Gemfile # add &lsquo;gem &ldquo;ember-rails&rdquo;, github: &ldquo;emberjs/ember-rails&rdquo;&rsquo;</p>

<p>bundle install
bundle exec rails g ember:bootstrap -g &mdash;javascript-engine js
bundle exec rails g ember:install &mdash;head</p>

<p>vim config/environments/development.rb # add config.ember.variant = :development
```</p>

<h2>Rails &ndash;> Ember connection</h2>

<p>Use Ember ActiveModel Serializer: <a href="https://github.com/rails-api/active_model_serializers">https://github.com/rails-api/active_model_serializers</a></p>

<h2>Deploying to Heroku</h2>

<p>I have already gone through the Heroku sign up process and installed the toolbelt appropriate for OSX (the toolbelt provides the <code>heroku</code> command line tool.)</p>

<p>Installing my rails application on Heroku was then a simple matter of:</p>

<p>```bash Add application in the current directory to Heroku
heroku login
heroku create &mdash;stack cedar
git push heroku master</p>

<h1>whenever you make database changes</h1>

<p>heroku run rake db:migrate
```</p>

<p>This creates an image with a particular configuration of applications and adds a <code>heroku</code> git remote to the git configuration.</p>

<p>Now you can visit the heroku app online (in my case at <a href="http://seshbot.herokuapp.com/static_pages/home">http://seshbot.herokuapp.com/static_pages/home</a>).</p>

<p>TODO: use <code>gem rails_12factor</code>? This alters the rails app a little to make it <a href="http://12factor.net/">12 factor</a>, which is a set of guidelines for how one should build an application to make it easier to administer and deploy. Not really important right now though.</p>

<!-- x_ -->


<h2>Troubleshooting and administering Heroku</h2>

<p><code>bash Various heroku debugging commands
heroku ps    # list running apps
heroku logs  # show application logs
heroku run console # run interactive ruby console
</code></p>

<p><code>bash Various heroku administrative commands
heroku config  # configure remote app through environment variables
heroku apps    # overview of apps
heroku destroy # deallocate remote server
heroku run rake db:migrate
</code></p>

<p><code>heroku config</code> sets environment variables for things you don&rsquo;t want to commit to git (e.g., passwords). Configure your Rails apps to use <code>ENV['MY_VAR']</code> instead of your super secret key, then run <code>heroku config:add MY_VAR=blahblah</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This week in review: my game table web app]]></title>
    <link href="http://seshbot.com/blog/2014/01/11/this-week-in-review-the-game-table-web-app/"/>
    <updated>2014-01-11T11:19:08+09:00</updated>
    <id>http://seshbot.com/blog/2014/01/11/this-week-in-review-the-game-table-web-app</id>
    <content type="html"><![CDATA[<p>First here&rsquo;s a quick summary of what I got up to:</p>

<ol>
<li>trying to build a simple &lsquo;gaming table&rsquo; application in Ember.js,</li>
<li>styling with Twitter bootstrap,</li>
<li>messing with plugins in my blog (trying unsuccessfully to fix code highlighting, and adding a UML tool &ndash; see below)</li>
</ol>


<p><center><img src='/images/plantuml/00178544eeee1acd089c0ec4883b3611.png'></center></p>

<p>I spent most of my time learning about Ember. <a href="http://emberjs.com">Ember.js</a> is a very nice looking front-end MVC framework that has a very appealing <a href="http://emberjs.com/guides/">getting started guide</a> that make it look <em>super simple</em> to create a reactive application. Three things that people will not tell you however:</p>

<ul>
<li>demo videos only ever show the main usage scenario of that framework</li>
<li>most new frameworks change so often that they&rsquo;re either unstable or very little up-to-date documentation exists, and</li>
<li>many of the benefits they offer you probably won&rsquo;t end up using anyway, for various reasons</li>
</ul>


<p>For now though I&rsquo;ll go ahead with it because I feel that I&rsquo;m just about to start doing cool stuff in it (it kinda always feels like this though.)</p>

<p><strong>Next week</strong> I&rsquo;m thinking of switching back to some C++ stuff so I can dabble in a realm I&rsquo;m more comfortable with for a while&hellip; Monday is a public holiday in Japan though so I&rsquo;ll probably be wandering around and not programming much.</p>

<!-- more -->


<h3>Problem 1: binding non-nested components was difficult</h3>

<p>I figured I would devote my first day last week to creating the framework for a small Gaming Table application. Perhaps just start off with a quick chat client or sketching app. I was not accounting however for the vagaries of modern web application development, and I ended up messing around with stupid little problems for most of the week. Looking back I feel it was quite frustrating overall &ndash; it seems that many of these new techs do not quite work as advertised, if at all.</p>

<p>Most tutorials and documentation will usually only tell you about one way to make an ember app &ndash; showing the details of a single entity or collection of entities of the same type at a time. Perhaps it might be some blogging application that lets you dig down into various blog entries, or perhaps it will involve showing all the tweets from a particular tweeter. Whatever the demo, I&rsquo;m sure it will show you how to explore <em>a single concept</em>.</p>

<p>The first thing I wanted to do was to show your online friends on the left side and allow you to create or enter an existing chat room. I immediately got stuck on a stupid little problem however that I stubbornly refused to get past, leading to several wasted days.</p>

<p>My specific problem was <em>how can I make the nav bar show the name of the current gaming table (kind of like a chat room), but show some placeholder message if I&rsquo;m not in a room</em>. The problem being that the region dedicated to showing information about the current table (players, cards etc) is not a descendent hierarchically of the nav bar.</p>

<p><center><img src='/images/plantuml/09385b523a9258b9f2b64d6596a93d8e.png'></center></p>

<p>Long story short, the correct way seems to involve: 1) modifying the &lsquo;Nav Bar&rsquo; controller to add a dependency to the &lsquo;Game Table&rsquo; controller; 2) add to the Nav Bar controller an alias or dynamic property pointing to the Game Table controller (this is conceptually the last table loaded); and 3) creating another dynamic property in the Nav Bar controller that is updated whenever <code>currentPath</code> is updated, and returns <code>null</code> if the route (<code>currentRouteName</code>) is no longer a table.</p>

<p>This might make sense, but it was a pain in the ass to discover. (Side note: I&rsquo;m working on a general &lsquo;getting to know Ember.js&rsquo; post that goes into a lot more detail on this so others tackling the same problem might not have to spend as long as I spent on it.)</p>

<p>Surround your pullquote like this {" text to be quoted "}</p>

<p>I&rsquo;m concerned that the Ember docs might not cover enough real world scenarios that &lsquo;proper&rsquo; applications might encounter (e.g., several regions dedicated to different information.)</p>

<h3>Live Help in IRC! 1980&rsquo;s tech to the rescue</h3>

<p>The IRC channel is pretty awesome &ndash; the #emberjs channel of freenode.org is one of the most populated channels on the server, and I&rsquo;ve saved a lot of time by asking for help there.</p>

<p>I spent a long time digging through documentation on how to solve this problem before I turned to IRC. Then within 10 minutes I had someone giving me meaningful advice that I ended up using. The secret was that I went in there with a minimalistic example of my problem that they could mark up and fix for me. <a href="http://jsbin.com/UzaFUZE/1/edit?html,js,output">Here&rsquo;s</a> the code I gave them and <a href="http://jsbin.com/UzaFUZE/4/edit?html,js,output">here&rsquo;s</a> what they gave me.</p>

<h3>Hosting a backend</h3>

<p>I have been mainly concentrating on the front end functionality so far, so didn&rsquo;t want to spend too long messing around with the server side. I had originally decided that I&rsquo;d learn some rails, but decided to try out a &lsquo;no backend&rsquo; solution &ndash; in this case <a href="http://deployd.com">deployd</a>. The two criteria I was after were a simple REST API and some kind of authentication, both of which deployd ostensibly offers. There were a few hiccups though.</p>

<p>The first was that deployd is still actively being developed, so the web UI isn&rsquo;t totally intuative. I won&rsquo;t go too far into it but it has been a hassle.</p>

<p>The next problem is that although both Ember and Deployd declare that they speak standard REST JSON language, it turns out they don&rsquo;t agree on how that language should look. I had to mess around a fair amount and ask around on IRC before discovering that you need to apply your own serializer, that intercepts all remote data transfers and allows you to &lsquo;munge&rsquo; it a little into a format that Ember is happy with.</p>

<p>Again, I&rsquo;ll include the details of all this in a post dedicated to Ember later.</p>
]]></content>
  </entry>
  
</feed>
