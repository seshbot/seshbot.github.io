<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Languages | Seshbot Programs]]></title>
  <link href="http://seshbot.com/blog/categories/languages/atom.xml" rel="self"/>
  <link href="http://seshbot.com/"/>
  <updated>2015-09-24T03:35:57+00:00</updated>
  <id>http://seshbot.com/</id>
  <author>
    <name><![CDATA[Paul Cechner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Practical Covariance and Contravariance]]></title>
    <link href="http://seshbot.com/blog/2015/09/21/co-and-contra-variance-made-easy/"/>
    <updated>2015-09-21T10:03:45+00:00</updated>
    <id>http://seshbot.com/blog/2015/09/21/co-and-contra-variance-made-easy</id>
    <content type="html"><![CDATA[<p><em>For a more in-depth rundown on covariance and contravariance explained in terms of category theory have a look at <a href="http://tomasp.net/blog/variance-explained.aspx/">Thomas Patricek&rsquo;s blog</a></em></p>

<p>Covariance and contravariance are things you&rsquo;ll probably ignore until you start using generics in ernest. Then one day you&rsquo;ll want to pass an enumerable to a function that takes a slightly different yet related type of enumerable and then <em>BAM</em> &ndash; you&rsquo;re hit with some crazy error messages and then all of a sudden you&rsquo;re up to your elbows in browser tabs of StackOverflow articles.</p>

<p>To cut straight to the chase, this is the problem:
<code>c#
Base rawBase = new Derived(); // this works
MyType&lt;Base&gt; wrappedBase = new MyType&lt;Derived&gt;(); // ERROR!
</code></p>

<p>Sometimes we want the OO polymorphism substitution rules (AKA Liskov&rsquo;s substitution principle) to apply to generic types too. Covariance and contravariance provide us a mechanism to allow this substitution to take place.</p>

<p>Surround your pullquote like this {" text to be quoted "}</p>

<p>So a covariant or contravariant generic type (e.g., a <code>IEnumerable&lt;T&gt;</code>) might be bound to other references of that type (e.g., <code>IEnumerable&lt;U&gt;</code>) when there is an inheritance relationship between the two predicated types. This allows you to pass your <code>IEnumerable&lt;Employee&gt;</code> to a function that actually accepts an <code>IEnumerable&lt;Person&gt;</code> without the compiler complaining that they are different types.</p>

<p>Surround your pullquote like this {" text to be quoted "}</p>

<p><em>Covariance</em> and <em>contravariance</em> are two different ways that differently specialised generic types should themselves be substitutable for each other like derived types are:</p>

<p><strong>Covariance</strong>: <code>MyType&lt;T&gt;</code> is covariant if typing <code>MyType&lt;Base&gt; x = new MyType&lt;Derived&gt;()</code> makes sense (this looks very much like standard substitution rules.)</p>

<p>An example of this is an <code>IEnumerable</code>-derived type, and is classified as having methods that <em>return</em> the predicated type, or <em>getters</em> (hence C# uses the <code>out</code> keyword.)</p>

<p>The implication is that the relationship between the covariant generic types is the <strong>same</strong> as the relationship between their predicated types, e.g.:
``` csharp
Base b = new Derived(); // OK because of Liskov substitution</p>

<p>IEnumerable<Derived> ds = new List<Derived>();
IEnumerable<Base> bs = ds; // OK because IEnumerable is covariant
Base first = bs.First();
```</p>

<p><strong>Contravariance</strong>: <code>MyType&lt;T&gt;</code> is contravariant if typing <code>MyType&lt;Derived&gt; x = new MyType&lt;Base&gt;()</code> makes sense.</p>

<p>An example of this is the .Net generic <code>Action</code> type, and is classified as having methods that <em>accept</em> the predicated type as a parameter, or <em>setters</em> (hence C# uses the <code>in</code> keyword.)</p>

<p>Contravariant types are probably less common than covariant types, and imply that the relationship between the generic types is the <strong>inverse</strong> of the relationship between their predicated types. E.g.:
<code>csharp
Action&lt;Base&gt; b = _ =&gt; {};
Action&lt;Derived&gt; d = b; // OK because Action is contravariant
d.Invoke(new Derived()); // invoke alias 'd', actually invokes 'b'
</code></p>

<!-- more -->


<h2>Why they&rsquo;re helpful</h2>

<p>Covariance and contravariance are useful in all the ways that Liskov&rsquo;s substitution principle is useful with regular polymorphic types &ndash; they are a mechanism that lets you inform the compiler when it&rsquo;s safe to bind an instance of one generic type to a reference of the same generic type with a different generic parameter.</p>

<p>If you&rsquo;re writing an application you&rsquo;ll often have one library or area of your code where you deal with heterogeneous types of one category, lets say <code>Animal</code>s, yet in another area of your code you&rsquo;ll deal exclusively with another related type, lets say <code>Dog</code>s. (Note that in math these are called <em>categories</em> and there is a whole set of theories in how to reason about them. See <a href="http://tomasp.net/blog/variance-explained.aspx/">Thomas Patricek&rsquo;s blog</a> for more details.)</p>

<p>To be very clear, covariance and contravariance only applies to:</p>

<ul>
<li>generic types</li>
<li>where the predicated types have an inheritence relationship</li>
<li>where a concrete object of that generic type is being bound to a reference (e.g., a passed as a parameter) of a different specialisation of that type</li>
</ul>


<h3>Liskov substitution without generics</h3>

<p>For example as a reminder of the standard substitution rules:</p>

<p>``` csharp (C#) example of OO substitution rules in action
class Animal {};
class Dog : Animal {};
class Poodle : Dog {};</p>

<p>void SaveDog(Dog dog) { &hellip; }
Dog LoadDog() { &hellip; }</p>

<p>Animal myAnimal = &hellip; ;
SaveDog(myAnimal); // ERROR &ndash; myAnimal might be a cat!
Animal myAnimal2 = LoadDog(); // OK &ndash; dog is a kind of animal</p>

<p>Poodle myPoodle = &hellip;;
SaveDog(myPoodle); // OK &ndash; poodle is a kind of dog
Poodle myPoodle2 = LoadDog(); // ERROR &ndash; LoadDog might return a non-poodle dog!
<code>``
OK cool, this is just how polymorphism works in OO languages. But here's where it gets confusing - what about generic types that are predicated on those types? E.g., a</code>IEnumerable<Dog><code>or a</code>Action<Dog>`?</p>

<h3>Liskov&rsquo;s substitution of generic types</h3>

<p>Covariance and Contravariance hints tell the compiler to allow <em>references</em> to generic types to obey the same rules as polymorphic types! It doesn&rsquo;t affect how you can use a particular type directly, but it affects what other types of that generic object it can be bound to (when being passed to or returned from functions, for example).</p>

<p>To extend the previous example:</p>

<p>``` csharp
// should be covariant but is not
interface IReader<T> {
  T Read() {&hellip;}; // simplified interface
};</p>

<p>// should be contravariant but is not
interface IWriter<T> {
  void Write(T entity); // simplified interface
}</p>

<p>void PrintDogFrom(IReader<Dog> dogReader) {
  Dog dog = dogReader.Read();
  // &hellip; print dog info or something
}</p>

<p>void WriteDogTo(IWriter<Dog> dogWriter) {
  dogWriter.Write(new Poodle());
}</p>

<p>// demonstrating a typical &lsquo;reading&rsquo; usage scenario
// that should work ideally</p>

<p>IReader<Poodle> poodleReader = &hellip;; // init somehow
PrintDogFrom(poodleReader); // ERROR! (IReader<Poodle> != IReader<Dog>)
// BUT it should be OK (poodles are dogs)</p>

<p>// demonstrating a typical &lsquo;writing&rsquo; usage scenario
// that should work ideally</p>

<p>IWriter<Animal> animalWriter = &hellip;; // init somehow
WriteDogTo(animalWriter); // ERROR! (IWriter<Animal> != IWriter<Dog>)
// BUT it should be OK (writer holds animals, can write dogs)
```</p>

<p>We recognise that a <code>IReader&lt;Poodle&gt;</code> instance should be able to be bound to a <code>IReader&lt;Dog&gt;</code> reference if <code>Poodle</code> is a <em>subclass</em> of <code>Dog</code>. This is known as <em>covariance</em> and is denoted in C# by labeling the generic type with the <code>out</code> keyword:</p>

<p>We can also see that <code>IWriter&lt;Dog&gt;</code> should be able to be bound to <code>IWriter&lt;Animal&gt;</code> if <code>Animal</code> is a <em>superclass</em> of <code>Dog</code>. This is known as <em>contravariance</em> and is denoted in C# by labeling the generic type with the <code>in</code> keyword.</p>

<p>``` csharp
// IReader is covariant on T
interface IReader<out T> {
  &hellip; // as before
}</p>

<p>// IWriter is contravariant on T
interface IWriter<in T> {
  &hellip; // as before
}
```</p>

<p>The difference in the two interfaces is simple &ndash; covariance is used when the dependent type is retrieved out of the generic type (an example would be how an <code>IEnumerable&lt;T&gt;</code> returns objects of type <code>T</code> and therefore is <em>covariant on T</em>). A generic type should be contravariant if it accepts the dependent type as input into its interface (an example would be how an <code>Action&lt;T&gt;</code> takes an instance of <code>T</code> as input when it is run, therefore it is <em>contravariant on T</em>).</p>

<p>Here&rsquo;s an attempt to visually represent valid type conversions for a cass hierarchy, a representative covariant type (<code>IReader</code>) and a representative contravariant type (<code>IWriter</code>):</p>

<p><center><img src='/images/plantuml/a40d5facb943418ac788d8f58dcc3776.png'></center></p>

<h2>When should my interfaces be covariant or contravariant?</h2>

<p>I only add this when its needed, but one thing you&rsquo;ll find is that you cannot have a covariant or contravariant type if you are both returning and accepting the dependent type in your interface. This is why in C# <code>IEnumerable</code> is covariant but <code>IList</code> is not &ndash; because <code>IList</code> allows you to add elements to the collection as well as retrieve the elements in the collection.</p>

<p>Sometimes you will be forced to make your type covariant if you want to use it in certain ways. In this case you may have to separate out the reading part of your interface into a separate interface and have the generic parameter be covariant there only.</p>

<h2>A few language-specific quirks you might run across</h2>

<p>Although the samples here might suggest otherwise, C# only allows <em>interfaces</em>, not concrete classes, to be specified as covariant or contravariant.</p>

<p>Java never used to support variance specifications much to its detriment. Java arrays behave in a covariant way, but because the interface supports both retrieving and setting elements, the following compiles (or at least used to, I havent tried it recently:)</p>

<p><code>
Dog[] dogs = new Dog[10]; // ...
Animal[] dogsAsAnimals = dogs;
dogsAsAnimals[0] = new Cat(); // whaa?
</code></p>

<p><em>Note: in researching this I discovered that C# arrays suffer from the same problem! Arrays in both languages will throw runtime exceptions when used illegally like this</em></p>

<p>C# has supported variance for a long time, but unfortunately there are some corners where they have not yet added it. I recently found out that <code>Task&lt;T&gt;</code> is not covariant, and so if you were implementing your own covariant type, its interface cannot return generic <code>Task&lt;&gt;</code> types, which is frustrating because thats what Microsoft strongly recommend you to do.</p>

<p>Example:
<code>
interface IReader&lt;out T&gt; {
  T GetNext();
  Task&lt;T&gt; GetNextAsync(); // compile error! although this should be idiomatic!
}
</code></p>

<p>The official answer to this (well, <a href="http://stackoverflow.com/questions/12204755/can-should-tasktresult-be-wrapped-in-a-c-sharp-5-0-awaitable-which-is-covarian">Jon Skeet&rsquo;s</a> word is very highly considered) was that adding variance to your interfaces quickly gets complicated in some way and so try to make your types invariant, and I cannot answer to that. My solution was to have the interface return a non-generic <code>Task</code> and dynamically downcast it to the generic type when I used it. This is not great, but its also quite safe as you know for certain the type of the task.</p>

<p>C++ generics (templates) do not directly support the notion of covariance or contravariance, but they don&rsquo;t need to &ndash; templates are specialised at compile time to generate separate instances for each required specialisation, so generic types are often not required to be coerced into other generic types.</p>

<p>For example:
``` cpp</p>

<p>template <typename T>
void printBases(vector&lt;T*> &amp; bases) {
  foreach (auto * b : bases) {</p>

<pre><code>cout &lt;&lt; b-&gt;Name() &lt;&lt; endl;
</code></pre>

<p>  }
}</p>

<p>vector&lt;Derived*> ds {};
printBases(ds); // works as long as Derived has Name() method</p>

<p>template <typename T>
void addDerived(vector<T> &amp; deriveds) {
  deriveds.push_back(new Derived{});
}</p>

<p>vector&lt;Base*> bs {};
addDerived(bs);
```</p>

<p>The above code shows that C++&rsquo;s templates are generally sufficient for performing generic operations on generically encapsulated types. The only constraings put on the type passed to the function is that it has a <code>Name()</code> method (this is known as &lsquo;duck-typing&rsquo;). Note that these are completely type-safe, as the compiler generates fully typed code at compile time. If I tried to add a <code>Base</code> type to a <code>Derived</code> vector, for example, you would get the expected error because the compiler would recognise the type mismatch.</p>

<p>On a related topic, it is also worth noting that C++ allows a derived class' overridden virtual methods to have <em>covariant return types</em> such that:
``` cpp
struct Base {};
struct Derived : Base {};</p>

<p>struct BaseFactory {
  virtual Base * create() { return new Base{}; }
};</p>

<p>struct DerivedFactory : BaseFactory {
  override Derived * create() { return new Derived{}; }
};</p>

<p>DerivedFactory * ds = new DerivedFactory();
Derived * d = ds->create();</p>

<p>BaseFactory * bs = ds;
Base * b = bs->create();
```</p>

<p>Java also supports covariant return types, but C# does not.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift: a solid modern imperative language]]></title>
    <link href="http://seshbot.com/blog/2014/06/03/swift-a-good-example-of-a-modern-imperative-language/"/>
    <updated>2014-06-03T23:25:06+00:00</updated>
    <id>http://seshbot.com/blog/2014/06/03/swift-a-good-example-of-a-modern-imperative-language</id>
    <content type="html"><![CDATA[<p><em>Note 1: these are first impressions only &ndash; I&rsquo;ve only spent a day really looking at the docs and playing with the XCode beta so I am probably mistaken about some stuff</em></p>

<p><em>Note 2: I am using a beta of XCode, and it has caused me some trouble (a mysterious service it starts keeps crashing, filling my HDD up with core files.) I would recommend waiting for the non-beta if I were you.</em></p>

<p>Apple recently announced the support of a new language targeted at the same application programming space as Objective C. It&rsquo;s called Swift and it seems to me a very good summary of the features all modern imperative languages are striving for.</p>

<p>The last decade or so has seen a strong resurgence in functional programing evangelism. Languages like F#, Scala, Clojure and even Erlang for a while re-introduced to mainstream programmers high-level concepts that imperative programmers were largely unfamiliar with. A short experiment with a language supporting algebraic data types, type inference, higher order functions, closures, or the standard foundational map, reduce and fold functions will convince any programmer that their language
would be far better off being more declarative.</p>

<p>For a comprehensive guide to the Swift language see the <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/GuidedTour.html">Swift tour</a>.</p>

<p><img src="/images/upload/2014-06-04-swift-xcode6.png" title="&ldquo;Some Swift code in Xcode 6 beta&rdquo;" ></p>

<p>I have wanted two write another iOS app for a while now, and so I&rsquo;m thinking Swift may be the way forward for me there. To that end I&rsquo;ve spent all this morning going through docs and messing with XCode to get a feel for the various idioms and coding styles it encourages&hellip;</p>

<!-- more -->


<h2>Syntactic niceties</h2>

<p>Swift is a very much streamlined language, and for low friction it seems to take a lot from F#. Like F#, a programmer can seemingly almost approach swift as a scripting language &ndash; the first line in your source file can be functioning application code, no boilerplate required! And the &lsquo;playground&rsquo; concept is very familiar to anyone who has used Scala Workspaces or F# interactive mode.</p>

<p>The clarity of syntax is quite impressive &ndash; type inference introduces <code>var</code> and <code>let</code> common to many modern languages, and bracket-less control flow operations and optional semicolons make your code look a lot cleaner (and a bit like golang).</p>

<p>Structure types may be initialised in-line at the point of instantiation: <code>val vga = VideoMode(width: 800, height: 600)</code>. Once you see this you think <em>of course, why would it be otherwise?</em></p>

<p>Syntactically there is a lot of shorthand available for interacting with fundamental data types:
``` csharp
// create an Array[Int]
var xs = [1, 2, 3]</p>

<p>// create a Dictionary&lt;String,Double>
var menu = [&ldquo;Coffee&rdquo;: 3.5, &ldquo;Bacon&rdquo;: 5.1]</p>

<p>// create a tuple of two strings
var location = (&ldquo;Tokyo&rdquo;, &ldquo;TYO&rdquo;)</p>

<p>// shorthand for iterating over Sequences
for x in xs { println(&ldquo;x is (x)&rdquo;) }
```</p>

<p>And anyone who loves Scala&rsquo;s string interpolation operators will appreciate the ability to write <code>println("hi, my age is \(me.age - 5)")</code>.</p>

<p>As a special treat, Swift also supports Objective-C style named parameters. This can make some functions arguments more clear when they have the same type:
```
func replace(inString str: String, #value: String, #withValue: String) &ndash;> String {
  // &hellip;
}</p>

<p>// then later call it:
val simplified = replace(inString: url, value: &ldquo;<a href="http://">http://</a>&rdquo;, withValue: &ldquo;&rdquo;);
```</p>

<p>OK perhaps that is not a great example, but I think the concept has a lot of merit.</p>

<h2>Functional concepts</h2>

<p>In addition to type inference and closures, Swift has obviously been checking out the Scala and F# and the like for ideas, much to its credit.</p>

<p>First, fret not because higher-order operations are all available to you, and included in the standard library are standard set of foundational functions you&rsquo;d expect in a functional language such that it is possible to write <code>var ys = map([1,2,3], {i in i * 2})</code>.</p>

<p>But one thing that seems quite interesting to me is the extended syntax available to enumerations (known as &lsquo;associated types&rsquo;) that make them almost seem like <em>algebraic data types</em>&hellip;
``` csharp
enum Shape {</p>

<pre><code>case Circle(Double)
case Ellipse(Double, Double)
case Square(Double)
</code></pre>

<p>}</p>

<p>func area(s : Shape) &ndash;> Double {</p>

<pre><code>switch (s) {
case .Circle(let radius): return 3.14159 * radius * radius
case .Ellipse(let min, let maj): return 3.14159 * min * maj
case .Square(let width): return width * width
}
</code></pre>

<p>}</p>

<p>area(Shape.Circle(10))
```</p>

<p>&hellip;plus, if you add a new value (say, Rectangle) to the enumeration the <code>area()</code> function will fail to compile, as the compiler will complain that the switch <em>must</em> be exhaustive. Take that scala!</p>

<p>Tuples can be <em>pattern matched</em> using placeholders, bound parameters and <em>where</em> clauses, which is a fairly awesome thing:
<code>csharp
switch (bounds) {
   case (0, 0): println("zero bounds!")
   case (0, _): println("x == 0")
   case (_, 0): println("y == 0")
   case let (x, y) where x &lt; 0 || y &lt; 0: println("invalid bounds!")
   case let (x, y) : println("bounds are [\(x),\(y)]")
</code></p>

<p>There is no true currying though of course it can be simulated by having functions return other functions &ndash; garbage collection + closures means that you can create generators along the lines of:
``` csharp
func makeGenerator(increment: Int) &ndash;> () &ndash;> Int {</p>

<pre><code>var x = 0
return {
    x += increment
    return x
}
</code></pre>

<p>}</p>

<p>var gen = makeGenerator(10)
for var n = 0; n &lt; 100; n = gen() {</p>

<pre><code>println(n) // prints 0, 10, 20, 30...
</code></pre>

<p>}
```</p>

<p><em>On a side note, Scala&rsquo;s currying leaves a lot to be desired, as does it&rsquo;s support of ADTs &ndash; one must explicitly make structures a </em>case class<em> before you get functionality approaching an ADT.</em></p>

<p><em>Optional types</em> are also supported in the library but also with nice syntactic sugar. The <code>?</code> operator defines an optional type (similar to C#) and also allows operations on that type to be optionally unwound. The <code>!</code> operator forces unwinding, and causes an error if the optional type is not set.</p>

<p>Also, there is some fancy syntax for switching on an optional type:
``` csharp
struct Job {</p>

<pre><code>var  title: String
</code></pre>

<p>}
struct Person {</p>

<pre><code>var name: String
var job: Job?
</code></pre>

<p>}</p>

<p>// create a person with no job!
var paul = Person(name: &ldquo;Paul&rdquo;)</p>

<p>if let title = paul.job?.title {</p>

<pre><code>println("you are a \(title)!")
</code></pre>

<p>}
else { // fallthrough because there was a nil optional</p>

<pre><code>println("you have no title!")
</code></pre>

<p>}
```</p>

<p><em>Note: this doesn&rsquo;t currently compile &ndash; the current XCode 6 beta does not compile the samples provided by the documentation. I&rsquo;ll leave this here though because it still captures the intent of the optionals feature</em></p>

<p>Notice how the <code>if`` resolves the expression as false because the</code>?``` operator did not resolve.</p>

<p>I haven&rsquo;t even touched on a few other cool features like <code>@lazy</code> annotation, generics, variadic parameters, or the myriad ways closures can be specified (it turns out <code>{$0}</code> is a valid closure, with inferred argument and return value!)</p>

<h2>OO niceties</h2>

<p>I&rsquo;ll describe some features based on where I find them most familiar from:</p>

<ul>
<li><em>C#</em> &ndash; <code>struct</code> and <code>class</code> types. Classes are reference-counted (see below) while structs have value semantics (are destroyed automatically.)</li>
<li><em>C#</em> &ndash; extensions and computed properties remind me of C# <em>extension methods</em></li>
<li><em>Objective-C</em> &ndash; <em>Automatic Reference Counting</em> (ARC) provides a kind of semi-manual garbage collection. Essentially whenever you set a reference type to <code>nil</code> it will be collected. (The language also supports weak references.) This system is similar to using <code>shared_ptr</code>s in C++ in that you can end up with circular references, but unlike C++ there don&rsquo;t seem to be any automatic scoping facilities that relinquish resources as they move out of scope. I might be wrong about this.</li>
<li><em>Objective-C</em> &ndash; Swift supports the notion of <em>protocols</em> for polymorphic behaviour</li>
<li><em>?</em> &ndash; Object identity can be compared (i.e., are these references to the same object?) using the <code>===</code> operator.</li>
</ul>


<h2>Does it go far enough?</h2>

<p>In many ways this is a fairly conservative language &ndash; Swift is clean and nice to use, and I think would make a good replacement for Objective-C, but most other modern languages are focusing on higher level concepts that don&rsquo;t seem to be getting a showing here.</p>

<p>The main thing that comes to mind is the lack of language features to help out with thread synchronisation and concurrency. Other languages are focusing on lightweight thread-like structures or coroutines, asynchronous actors or asynchronous computation expressions/monad type syntax (think F# <code>async {}</code>.)</p>

<p>This is the first release of this language and I think some initial conservatism might be sensible. Typically I think compiled and C-based languages have preferred to put new functionality into libraries and only reluctantly add keywords and syntax to the existing base language. On the other hand, other languages (C# 5, F#, Haskell) have shown that without syntactic sugar (like <code>async { }</code>, <code>do { }</code>, <code>yield</code> and the like) it is seemingly implausible to make async-friendly code look super readable and imperative, avoiding what is often known as <em>callback hell</em>.</p>

<p>So here&rsquo;s hoping this project keeps the steam it&rsquo;s started off with.</p>

<h2>Do we need another language?</h2>

<p>Swift is certainly more approachable than Objective-C, which I very much appreciate. Apple have always been quite good at providing an environment where different languages interoperate seamlessly, so there really seems no downside &ndash; if you have a lot invested in Objective-C you can still leverage all your previous work with Swift, or presumably use other peoples swift libraries in your own Objective-C applications.</p>

<p>There will always be curmudgeons of course, but they should be ignored. The lengths that some will go to to justify not having to learn new concepts is always amazing to me, especially when doing so is the best way to progress in our industry!</p>

<p>Apple takes the development of programming languages quite seriously. They are heading up some of the more interesting additions to new versions of C++, most anticipated (by me) being the &lsquo;modules&rsquo; concept that promise to bring C++ compile times and binary interfaces in line with more modern high-level languages. They play this role of innovator well here because the concepts outlined in their proposal are drawn directly from practical experience in implementing said features in the
Objective C language itself.</p>
]]></content>
  </entry>
  
</feed>
