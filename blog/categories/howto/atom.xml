<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: HowTo | Seshbot Programs]]></title>
  <link href="http://seshbot.com/blog/categories/howto/atom.xml" rel="self"/>
  <link href="http://seshbot.com/"/>
  <updated>2015-01-25T03:29:55+00:00</updated>
  <id>http://seshbot.com/</id>
  <author>
    <name><![CDATA[Paul Cechner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The best way for programmers to interview programmers]]></title>
    <link href="http://seshbot.com/blog/2014/01/23/the-best-way-for-programmers-to-interview-programmers/"/>
    <updated>2014-01-23T20:56:52+00:00</updated>
    <id>http://seshbot.com/blog/2014/01/23/the-best-way-for-programmers-to-interview-programmers</id>
    <content type="html"><![CDATA[<p><strong>Every programmer should know how to give technical interviews.</strong> Although you will rarely be judged on your interviewing abilities, it is definitely in your best interest to help ensure your company is hiring effective programmers. If you manage to surround yourself with great programmers you&rsquo;ll foster a much better environment in which you can become a great programmer yourself. If you find yourself surrounded by programmers you consider sub-par you&rsquo;ll end up supporting their crappy software.</p>

<p>Surround your pullquote like this {" text to be quoted "}</p>

<p>I believe this advice applies to all programmers &ndash; of course interviewing is rarely in your job description, but it is definitely in your best interest to make sure interviews get done well at your company. Unfortunately most companies will allow anyone to interview and won&rsquo;t have a good way to tell that they&rsquo;re not doing it well, ultimately damaging the work environment.</p>

<!-- more -->


<h2>The mediocre way</h2>

<p>Typically interviewers will be given a list of questions to ask and some criteria by which to judge the answers to these questions. Perhaps the interview will follow some format of scripted grilling, perhaps a practical section, and some kind of open two-way forum. Following a script is supposed to allow the candidates to be compared fairly on a level playing field. The practical section might consist of taking apart a printed code sample or even writing some code, and the forum provides the candidate the opportunity to explain their situation and determine if they actually want to work at the company themselves.</p>

<p>This has a lot of problems however:</p>

<ul>
<li>if the interviewer completely controls the questions the candidate may come across poorly because they don&rsquo;t happen to have experience in the specific fields chosen, or because he or she is just very nervous</li>
<li>it promotes a one-size-fits-all mentality, which will lead to a homogenous work environment</li>
<li>it is too easy for the interviewer to just phone it in without truly probing for deeper knowledge. In fact this becomes more likely as the interviewer becomes bored of the questions</li>
<li>it is too easy for candidates to blag &ndash; some people can sound like experts when all they have is brash confidence and a few keywords. Plus, recruitment companies often coach candidates on what questions might be asked so those keywords are likely to be there</li>
<li>quiz-type interviews often fail to test higher-level proficiencies, such as communicating architecture and design information</li>
</ul>


<p>I think it&rsquo;s well worth throwing away the &lsquo;standardised&rsquo; approach to testing technical capabilities. There is too much risk of false negatives <em>and</em> false positives along this approach &ndash; a poor programmer may have been well coached, and a good programmer might have an unfortunate gap right where your questions probe (surely I could have worded that better&hellip;)</p>

<h2>The Seshbot way</h2>

<p>While it is important to cover several bases in an interview, the most important question I always ask is <strong>&lsquo;what was the most recent interesting project in which you were heavily involved?&rsquo;</strong> I almost always spend most of the interview going deep into a few questions that branch off the answers to this question.</p>

<p>Surround your pullquote like this {" text to be quoted "}</p>

<p>Once the candidate has explained the project, the interviewer can then challenge the details of that project as a way of testing the candidate&rsquo;s knowledge of that system and the reasoning behind its design. The types of question would vary depending on the workplace, but at my last job for example I probably would have asked:</p>

<ul>
<li><em>architecture:</em> please outline for me (ideally on a whiteboard or paper) how the whole system hangs together. I might expect the candidate to talk about the systems involved, data flows, security considerations, or data storage and integrity for example.</li>
<li><em>design quality attributes and compromises:</em> how does this system provide, or how would you adjust this architecture to provide, various quality attributes (high availability, reliability, scalability, performance, security)? What compromises would these changes entail?</li>
<li><em>design:</em> if I were a new developer working on this team, how would you describe the design of this system to me?</li>
<li><em>specifics:</em> I also spend a lot of time asking &lsquo;what is the purpose of that service/component/class&rsquo;</li>
</ul>


<p><span style="color: green; font-weight: bold;">Pros:</span> This addresses all of the problems I outlined with the more traditional approach:</p>

<ul>
<li>the candidate is talking about something they are presumably proud of and know inside-out. If they can&rsquo;t talk happily on this subject they won&rsquo;t be able to talk about any subject</li>
<li>the candidate is more able to show you what their particular skill set entails, and what they believe is their forte without them awkwardly spelling it out (through stupid &lsquo;what are your strengths and weaknesses&rsquo; questions)</li>
<li>the interviewer must be engaged in the process in order to ask relevant questions. It is in fact a great way to keep the interviewing process more interesting &ndash; and even educational &ndash; for the interviewer</li>
<li>because it is a &lsquo;deep&rsquo; and detailed question, it is very difficult to blag. Someone might be able to re-draw arcitectural diagrams they had to become familiar with in the past, but they would still need to know <em>why</em> the system was configured that way to answer the questions</li>
<li>the test focuses on communication of ideas, which I believe is the most important skill for a team member to have. You may or may not agree with this, but you certainly want to have tested it</li>
</ul>


<p><span style="color: red; font-weight: bold;">Cons:</span> There are some caveats however:</p>

<ul>
<li>do not let the candidate run the interview. It can be too easy to tackle a question by diverting into another topic &ndash; make sure that the candidate answers the questions you ask to your satisfaction</li>
<li>keep an eye on the time, because although you want to go deep on few questions, there&rsquo;s no point going deeper into a topic once the candidate has demonstrated their knowledge in that area</li>
<li>it can be difficult to recall what you discussed later when you&rsquo;re trying to make a decision about the candidate. Take notes constantly, and summarise the interview in an email directly after you finish it</li>
<li>if the candidate chooses to talk about technologies with which you&rsquo;re not very familiar yourself you&rsquo;ll be forced to ask largely high-level questions. This is not terrible as I believe you can still figure out if they know their stuff, but you might end up having to take their word on a few things</li>
</ul>


<h2>How to measure success</h2>

<p>Other than retention rates I am not certain of how to measure if your technique is successful, but in my experience most prospective programmers in the job market are not very good (something like 1-in-10), and so if you&rsquo;re hiring a high percentage of applicants you&rsquo;re probably letting in a few duds.</p>

<p>This might seem depressing and I feel bad about saying that, but this is my blog and I want to put my honest opinion up here. Take it as you will. <a href="http://www.codinghorror.com/blog/2007/02/why-cant-programmers-program.html">Others agree with me</a> however.</p>

<p>Because of this it is a very good idea to have a basic pre-screening done before the proper interview. It should be very simple and not take too long &ndash; a simple test should be sufficient to weed out most of the poor programmers, and you need to remain respectful of the candidate&rsquo;s time as they are interviewing <em>you</em> as well.</p>

<h2>What about live coding?</h2>

<p>Here&rsquo;s an anecdote: once while applying for a job at a large investment bank I was given an almost purely practical interview. On arriving I sat down with the lead developer and chatted for a bit before heading into the programming room to do some pair programming. Sweet right?</p>

<p>Anyway I sat at this Windows box with Visual Studio on it (this was for a largely .Net job) and was given the basic <a href="http://c2.com/cgi/wiki?FizzBuzzTest">fizzbuzz test</a>. There is a lot of controversy around this interview technique but I actually enjoy practical questions so didn&rsquo;t have a problem with the idea. The interview was a shambles however, and although I did well I count it as a terrible interview that did not serve its purpose at all.</p>

<p>First I had trouble with their development environment. The machines at this bank were ridiculously slow &ndash; they were running a special (presumably super-secure) build of Windows 95 that was by now literally something like 13 years old, and they couldn&rsquo;t change because it would be too costly to get a special build of a more modern Windows. So we sat there for a long time waiting to get all the software up and running, and every button click seemed to require the human genome to be re-calculated.</p>

<p>The next problem was that making sure that the interviewer and I were on the same page took way too long. I did the fizz-buzz program, and decided to show him how I would do it declaratively (with LINQ) so we could talk about the benefits of declarative programming. Of course if I were interviewing someone I would want them to solve the problem as simply as possible first, then make it more complicated later. I know through experience that many candidates think that they are expected to say things like <em>I would never start programming without a firm set of requirements!</em> or some other approach showing that they know about all areas of software development.</p>

<p>Turns out this guy wanted me to demonstrate some test-driven development, and so was expecting me to have started by writing tests. So OK, I figured I&rsquo;d download <a href="http://www.specflow.org/">SpecFlow</a> because I had used it successfully recently and really liked it. But no, this is a bank I&rsquo;m sitting in so we can&rsquo;t just download stuff &ndash; things have to go through a days-long process of scanning and justification before new software is installed. So I ask what they use and he mentioned some package or other. So I had to read the docs on that, and we had trouble actually running it on this machine in the end because we had to configure some directories in Visual Studio or something, and much more time was wasted.</p>

<p>I&rsquo;m not saying it can&rsquo;t work, but in my opinion live coding is fraught with dangers. A much better alternative is to browse the applicant&rsquo;s source code online for projects they have worked on. Realistically though the number of people I have interviewed that had  online code I could evaluate was exactly 1 (I did hire him though!)</p>

<h2>General interviewing advice</h2>

<p>Obviously interviewing is a difficult thing to do well. You have a small amount of time to decide whether to commit your company to filling a permanent seat on your team, which is a <em>huge</em> deal. Probably practice is the only thing that helps mitigate this (and the Seshbot technique of course) but here&rsquo;s a few other pointers that come to mind:</p>

<ul>
<li><em>take notes constantly!</em><br />One of the problems you can encounter with a less scripted interview is that when summarising how the interview went, it can be difficult to recount all the things you talked about. I tend to fill a couple of pages in my notebook with bullet-pointed scribbles during each interview</li>
<li><em>know when you know</em><br />The best interview I ever gave was a really nice guy called Phil. Only a few minutes into the interview I realised that he had probably handled my questions better than I could have. So I just sat back and told him &lsquo;I don&rsquo;t think we really need to go any further&rsquo;, then I walked out and asked HR to give him an offer on the spot. I was always happy that I did that.</li>
<li><em>do basic screening</em><br />If no screening has been performed it is worthwhile asking a couple of basic language-specific technical questions to make sure you&rsquo;re not wasting your time</li>
<li><em>the interviewer doesn&rsquo;t need to know the answer to all the questions he or she asks</em><br />You can choose to pretend that you really know and are just testing their knowledge, but if I don&rsquo;t know something I usually don&rsquo;t mind asking questions in an outright manner &ndash; there&rsquo;s no need to maintain a facade of superiority and being honest helps promote a candid atmosphere</li>
<li><em>have a standard approach to summarising the interview</em><br />At the end of the day you need to provide some quantifiable metric by which to decide who to hire. Plus HR and the recruiter usually require some specific information. At my last place HR was happy with just the name, date, my decision/recommendation, and justification for that decision</li>
<li><em>if you&rsquo;re doing a phone interview (unfortunate!) follow a script for the scaffolding for the interview</em><br />This keeps you from spending too much time on the plesantries and keeps you from waffling on</li>
<li><em>I usually like to ask if there&rsquo;s any good books a person would recommend, and ask what they got from it</em><br />It may be curmudgeonly of me but I don&rsquo;t think a person can learn fundamentals very well from Stack Overflow alone</li>
<li><em>Work with your recruiter, but assume they are coaching the candidates</em><br />A cool side-effect of this techinique is that it doesn&rsquo;t matter if candidates are coached &ndash; I told our recruitment agencies to feel free sharing information about our interviews with candidates</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Client-side authentication with ember and rails]]></title>
    <link href="http://seshbot.com/blog/2014/01/22/client-side-authentication-with-ember-and-rails/"/>
    <updated>2014-01-22T00:30:27+00:00</updated>
    <id>http://seshbot.com/blog/2014/01/22/client-side-authentication-with-ember-and-rails</id>
    <content type="html"><![CDATA[<p><em>This post follows on from the previous post <a href="/blog/2014/01/15/creating-a-rails-plus-ember-app-from-scratch/">creating and deploying a rails + ember app from scratch</a>. In that post I created a basic ember application being served from rails. Here I&rsquo;ll be adding user authentication to the application I created using the &lsquo;edge template&rsquo; option I discussed, which uses the &lsquo;ember-rails&rsquo; gem to establish the basic connectivity.</em></p>

<p>I do not want to implement authentication and authorization myself. It is tricky to get right and tends to cause huge damage when it goes wrong in production.</p>

<p>So I have spent at least three full days looking at various solutions I can build into my simple Ember/Rails application and spent a lot of time experimenting.</p>

<p>This post describes my current understanding of authentication for web applications, and the approach I used to implement a basic authentication system I put up on heroku at <a href="http://seshbot.herokuapp.com">http://seshbot.herokuapp.com</a></p>

<p>If you want to see the source code, have a look at <a href="https://github.com/seshbot/new-ember-rails-app">https://github.com/seshbot/new-ember-rails-app</a></p>

<p><img class="center" src="/images/upload/2014-01-22-seshbot-login.png" title="&ldquo;Oh jeez I already forgot my password&rdquo;" ></p>

<p><em>NOTE: this is very text-heavy because after three full days I decided not to spend too long on this blog post. Therefore there are no images at this time. I may update it later to have some nice UML or screenshots, but that time is not now.</em></p>

<!-- more -->


<h2>Learning the basic concepts</h2>

<p>I found a few very detailed introductions to client-side authentication with ember which helped me through all stages of implementation of my system. I highly recommending going through the following resources and comparing the different approaches' overlaps and differences. I also got a lot of value out of re-visiting them after I finished implementing my own solution, because it made me think about some of the trade offs I had made.</p>

<h3>Watch these awesome client-side suthentication videos</h3>

<p><a href="http://www.embercasts.com/">http://www.embercasts.com/</a> covers the client-side concepts of authentication with Ember in <a href="http://www.embercasts.com/episodes/client-side-authentication-part-1">part 1</a> and <a href="http://www.embercasts.com/episodes/client-side-authentication-part-2">part 2</a> of their &lsquo;Client Side Authentication&rsquo; videos. Specifically:</p>

<ul>
<li>client token authentication concepts</li>
<li>sending auth request to the server and saving the token (in a &lsquo;login&rsquo; controller)</li>
<li>setting up controllers</li>
<li>catching &lsquo;unauthorised&rsquo; error responses and redirecting to login pages</li>
<li>keeping a sane workflow so the login transitions the user back to their original page</li>
<li>storing the auth token in local storage so page refresh doesn&rsquo;t reset it <em>(note: I used cookies instead of local storage)</em></li>
<li>preventing the unauthorized server request if client knows it doesn&rsquo;t yet have a token</li>
</ul>


<p>This doesn&rsquo;t cover the server side, or anything to do with Rails or any other authenticating server specifically &ndash; he used a home-grown demonstration Node.js server for the demonstration. Also doesn&rsquo;t specifically cover authorization (I can see users but can&rsquo;t see their emails for example.) The ember front-end polish in there is all nice though, and I found it very helpful to revisit these videos after I had a basic system in place, in order to add nice error messages and improving the &lsquo;view page/redirect to login/return to page&rsquo; workflow.</p>

<h3>Read about SimpLabs' experience making Ember.SimpleAuth</h3>

<p>SimpLabs wrote a <a href="http://log.simplabs.com/post/57702291669/better-authentication-in-ember-js">blog post</a> detailing their experiences getting ember authentication to work sensibly and according to the various standards.</p>

<p>They wrapped this functionality up in an ember plugin called <a href="https://github.com/simplabs/ember-simple-auth">Ember.SimpleAuth</a> (and wrote about <a href="http://log.simplabs.com/post/63565686488/ember-simpleauth">how to use it</a>). There&rsquo;s even a <a href="https://github.com/ugisozols/ember-simple-auth-rails-demo">demo rails app</a> that uses it.</p>

<h3>Follow the very detailed ember-auth + devise tutorial</h3>

<p>Someone else has written a rails plugin called <a href="https://github.com/heartsentwined/ember-auth-rails">ember-auth</a> that presumably takes care of both sides (rails server and ember client) of the problem. The true value for learning is in the <a href="https://github.com/heartsentwined/ember-auth-rails-demo/wiki">demo application&rsquo;s tutorial</a> however, which covers:</p>

<ul>
<li>setting up your rails app</li>
<li>setting up devise for rails</li>
<li>modeling the server entities and API endpoints</li>
<li>writing tests for all of the above</li>
<li>setting up your ember app</li>
<li>creating front-end UIs for authentication with ember</li>
</ul>


<p>It also has a separate page that goes into <a href="https://github.com/heartsentwined/ember-auth/wiki/Security">security concerns</a> that highlights a few best practices to keep in mind that frameworks will probably not implement for you:</p>

<ul>
<li>always use https</li>
<li>authentication checks in the client are a convenience only and should never replace auth validation in the server</li>
<li>do not use the &lsquo;current user&rsquo; ID when retrieving priveleged resources (i.e., don&rsquo;t use client-provided data when performing authorization related functionality)</li>
<li>never store any credential information in cookies &ndash; generally just store the server token, which is expendable</li>
<li>do not rely on the client framework alone to clear caches etc when logging out &ndash; ember data for example doesn&rsquo;t offer a way to clear the data store</li>
</ul>


<h3>A few other side-notes while we&rsquo;re talking theoretical</h3>

<p><a href="https://github.com/kristianmandrup/ember-beercan">ember-beercan</a> seems to explore a different approach that I don&rsquo;t really like, but does have some interesting information on using rails and devise on the server side that I might look at later.</p>

<p>A general concern to keep in mind is that for security reasons if the client-side application is not running on the same url/port as the server application the browser might refuse to let them communicate. In this case apparently you should add Rack::Cors to your app (haven&rsquo;t looked into that yet.)</p>

<p>There is also a lot of discussion around whether the client side should be involved at all in the auth negotiation, and perhaps leaving that up to a separate set of pages served by the server, and the server refuse access to the app at all until that time. This makes the client app much simpler as it can always assume that the user is authenticated (see stack overflow questions <a href="http://stackoverflow.com/questions/19401087/ember-js-how-to-get-access-to-store-from-app-object">how to access store from app object</a>, <a href="http://stackoverflow.com/questions/19414393/ember-js-session-cookie-based-authentication-with-rails-and-devise">session cookie based auth with rails and devise</a>.)</p>

<p>When looking into server-side authentication information I found <a href="http://www.robertsosinski.com/2008/02/23/simple-and-restful-authentication-for-ruby-on-rails/">this description of a simple hand-rolled solution</a> to be quite helpful, because it is quite short and covers only the rails side.</p>

<h2>What we want from an auth system</h2>

<p>A minimal authentication system should provide:</p>

<ul>
<li><em>create user</em>: an interface for creating users</li>
<li><em>login user</em>: an interface for authenticating a user based on username or email address and password</li>
<li>error handling: the interface should provide nice handling for errors (if there&rsquo;s an error message it should be printed nicely)</li>
<li>allow session to persist for some amount of time so the user doesn&rsquo;t have to log in every time they come back</li>
</ul>


<p>In addition however, we want the system to provide authrisation:</p>

<ul>
<li>separation of user roles (administrators, regular users, guests/unauthenticated users)</li>
<li>authorisation of access to server resources &ndash; the server should send a <em>401 unauthorized</em> response to unauthorised requests</li>
<li>sensible UI workflow for logging in and unauthorised access attempts

<ul>
<li>when a server responds with a 401 response, the UI should take the user to the login screen</li>
<li>after login, the user should be returned to a sensible page, possibly based on what they were trying to achieve before being redirected to the login page</li>
</ul>
</li>
</ul>


<p>Of course the system has to follow industry practices and where possible use well-established technologies to offload all the dangerous stuff like dealing with passwords and hashing.</p>

<h2>Building an Authenticating app</h2>

<p>I spent a <em>lot</em> of time experimenting with the various options, generally with little success. The executive summary is that most high-level plugins are generally not production ready, or don&rsquo;t work well together with the latest versions of other parts of the architecture. I ended up following a great tutorial on how to hand-roll your own authentication framework in Ember and Rails, using only a single bcrypt Rails gem for the password stuff.</p>

<h3>Failed attempt 1: ember-auth-easy Rails gem</h3>

<p>I was quite hopeful when I found <a href="https://github.com/mharris717/ember-auth-easy">ember-auth-easy</a> which was made to work with <a href="https://github.com/mharris717/ember_auth_rails">ember-auth-rails</a> to provide a full Rails backend/Ember frontend token based authentication solution.</p>

<p>Unfortunately as with so many things in Rails these days, lots of stuff doesn&rsquo;t work with lots of other stuff if you&rsquo;re trying to use the latest versions of things. The devise rails integration was found to be lacking for some reason and there was some mass change involved that broke backwards compatability, and many slightly older gems don&rsquo;t seem to work well anymore. I think it was made to work with Rails 3 as well (I&rsquo;m on Rails 4.)</p>

<p>In addition, there&rsquo;s a whole lot of gems up there and I&rsquo;m starting to get pissed off at having to learn 5 new buzzword-riddled technologies for every one new one I learn.</p>

<p>Before I decided to abandon it I created the following steps (I write it here in case I decide to go back to it later)</p>

<p>```bash Rails Trying to install ember-auth-rails on Rails
vim Gemfile</p>

<h1>add the following: # gem &lsquo;ember_auth_rails&rsquo;, :git => git://github.com/seshbot/ember_auth_rails.git</h1>

<h1>gem &lsquo;ember-data-source&rsquo;, &lsquo;>= 1.0.0.beta.3&rsquo;, &lsquo;&lt; 2.0&rsquo; # ember-data not yet out of beta</h1>

<h1>gem &lsquo;emblem-rails&rsquo;, &lsquo;~> 0.1&rsquo; # easier to write templates</h1>

<h1></h1>

<h1>gem &lsquo;ember-auth-rails&rsquo;, &lsquo;~> 5.0&rsquo; # client-side authentication</h1>

<h1>gem &lsquo;ember-auth-request-jquery-rails&rsquo;, &lsquo;~> 1.0&rsquo; # auth requests via jQuery.ajax</h1>

<h1>gem &lsquo;ember-auth-response-json-rails&rsquo;, &lsquo;~> 1.0&rsquo; # responses in json</h1>

<h1>gem &lsquo;ember-auth-strategy-token-rails&rsquo;, &lsquo;~> 1.0&rsquo; # token authentication</h1>

<h1>gem &lsquo;ember-auth-session-cookie-rails&rsquo;, &lsquo;~> 1.0&rsquo; # use cookies</h1>

<h1>gem &lsquo;ember-auth-module-ember_data-rails&rsquo;, &lsquo;~> 1.0&rsquo; # ember-data integration</h1>

<p>#</p>

<h1>gem &lsquo;devise&rsquo;</h1>

<p>vim config/application.rb</p>

<h1>add &ldquo;require &lsquo;devise&rsquo;&rdquo; to bottom</h1>

<p>bundle install # install new gems
bundle exec rake ember_auth_rails_engine:install:migrations
rails g devise:install
bundle exec rake db:migrate</p>

<p>```</p>

<h3>So I hand-rolled my solution</h3>

<p>I eventually found a great post called <a href="http://coderberry.me/blog/2013/07/08/authentication-with-emberjs-part-1/">authentication with ember.js</a> by a dude who seems to really know what he&rsquo;s talking about. It seems to be a culmination of several weeks of work, and a collaboration with a few other developers. It also includes a link to <a href="https://github.com/rails-api/rails-api">Rails::API</a>, which I really want to use in the future.</p>

<p>The Rails server in the tutorial provides an API that allows creation of a new user, authenticates a user/password combination, and provides admin information to authenticated users. The rails implementation code consists of:</p>

<ul>
<li>router exposes a <em>user</em> resource (for creation and reading) and a <em>session creation</em> post route</li>
<li><code>user</code> model is composed of multiple <code>api-key</code>s &ndash; when the model is loaded, it will create a new api-key if there are no remaining active session keys

<ul>
<li>the <code>user</code> model also invokes the <a href="http://api.rubyonrails.org/classes/ActiveModel/SecurePassword/ClassMethods.html#method-i-has_secure_password">has_secure_password</a> security method that provides an <em>authenticate</em> method (this is built into the Rails framework and uses the bcrypt gem)</li>
</ul>
</li>
<li><code>api-key</code> model is composed of an <em>access token</em> and an <em>exipiry time</em></li>
<li>all controllers have access to an <em>ensure_authenticated_user</em> function that searches for an active API session key that is associated with the current <em>HTTP_AUTHORIZATION</em> HTTP header</li>
<li>the <code>user</code> controller allows an unauthenticated client to show or create a new user record, but requires an authenticated session to show all users</li>
<li>the <code>session</code> controller (invoked via HTTP <em>post</em> from the <em>session creation</em> route) provides <em>login</em> functionality (session creation)

<ul>
<li>first it looks up a <code>user</code> associated with the given username or email</li>
<li>it then invokes the user object&rsquo;s <em>authenticate</em> method with the given password</li>
<li>if either of these steps fail a HTTP 401 response is returned, otherwise a 201 response with the user&rsquo;s <em>session API key</em></li>
</ul>
</li>
</ul>


<p>In the implementation provided in this system, the notion of a <em>session</em> is not actually stored anywhere in the server &ndash; it is merely an access point to a secure token associated with an <code>api-key</code> the user has (a new <code>api-key</code> is created if the session creation request is valid but no current active session key is available.)</p>

<p>An interesting thing I noticed while re-reading the <a href="http://log.simplabs.com/post/57702291669/better-authentication-in-ember-js">SimpLabs blog post</a> I mentioned previously is that this scheme does not allow a user to delete their <em>access token</em> from the server at all. Logging out just means clearing the token cookie &ndash; if the user re-authenticates the server will just dish them out the same token. If I extended the logout action to clear the token from the server however, all of the user&rsquo;s sessions would become invalidated, so I&rsquo;d have to change the scheme to create new access tokens for every separate login. I&rsquo;ll leave it as is for now and have a think about it.</p>

<p>As with all other ember things, the instructions were written with a prior version of ember and so don&rsquo;t work anymore. I had a bit of fun getting it working but a couple of things to keep in mind:</p>

<ul>
<li>use latest version of bcrypt</li>
<li>use &lsquo;jquery-cookie-rails&rsquo; gem</li>
<li>demo uses the <a href="https://github.com/rails-api/rails-api">Rails::API</a> gem instead of creating a whole Rails application with views etc. Because I previously used the <em>ember-rails</em> gem I didn&rsquo;t do this</li>
<li>retrieving data from the store is done differently now &ndash; see the ember docs</li>
<li>accessing the store from anything other than a router can be difficult. I get it with this hackery: <code>var store = GameTableServer.__container__.lookup('store:main')</code> (see <a href="http://stackoverflow.com/questions/19401087/ember-js-how-to-get-access-to-store-from-app-object">http://stackoverflow.com/questions/19401087/ember-js-how-to-get-access-to-store-from-app-object</a>)

<ul>
<li>TRICK! another problem &ndash; store returns an async promise, so you need to wait for that! god dammit. <code>var self = this; store.get(...).then(function(user) { self.set('apiKey', ...)})</code></li>
</ul>
</li>
<li>if something doesn&rsquo;t seem to be working, keep an eye on your browser&rsquo;s javascript console, net traffic and your rails logs (in heroku you can do this with <code>heroku logs</code> or something)</li>
</ul>


<p>You can have a look at the app as it currently stands (as of Jan 2014) on <a href="http://seshbot.herokuapp.com">seshbot.herokuapp.com</a>. If you&rsquo;re reading this much after Jan 2014 however it probably wont be there any longer.</p>

<h3>Alternative: Use &lsquo;devise&rsquo; gem directly</h3>

<p><a href="https://github.com/plataformatec/devise">Devise</a> seems like a very mature and comprehensive rails &lsquo;authentication solution&rsquo; that seems to handle a lot of authentication related problems out of the box in a very configurable way. It takes care of a lot of stuff like sending password reset emails, locking accounts after failed validations, connecting to various auth providers, and lots of other stuff. I will probably end up moving towards it if I ever make an app that warrants that kind of thoroughness.</p>

<p>I found a pretty useful comment on stack overflow that <a href="http://stackoverflow.com/questions/16513066/devise-with-rails-4">details how to get it running quickly with Rails 4</a> &ndash; not sure if thats more useful than the docs.</p>

<p>I started following <a href="https://github.com/heartsentwined/ember-auth-rails-demo/wiki">this very detailed tutorial</a> on using rails + ember + devise and found it very useful. Again, I couldn&rsquo;t get things working well together and had to abandon it. If I were to revisit I might also consider following these <a href="http://avitevet.blogspot.com.es/2012/11/ember-rails-devise-token-authentication.html">very detailed instructions on devise + ember</a>.</p>

<h3>Alternative: Use SimpleAuth for client-side stuff</h3>

<p>SimpLabs' <a href="https://github.com/simplabs/ember-simple-auth">SimpleAuth</a> (discussed in <a href="http://log.simplabs.com/post/63565686488/ember-simpleauth">this SimpLabs blog</a> and mentioned previously in this post) looks pretty cool, and is recently very active. It is still v0.1.0 so I&rsquo;d prefer to keep away from it for now, but if I wanted OAuth integration (to have a &lsquo;login with Facebook&rsquo; or whatever) I might look into using this for the client-side code.</p>

<h2>My current conclusion</h2>

<p>It is laughable that Ember and Rails are in such states of flux that it was easier to hand-roll a solution (although based on a very detailed set of instructions!) than it was to use existing gems and plugins. I hope that changes in the future.</p>

<p>If I ever decide I want a more complex auth solution using rails and ember, I&rsquo;d probably look at using devise for the Rails side and SimpleAuth for the ember side. I would expect a lot of heart-ache along the way though.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating and deploying a Rails + Ember app]]></title>
    <link href="http://seshbot.com/blog/2014/01/15/creating-a-rails-plus-ember-app-from-scratch/"/>
    <updated>2014-01-15T08:54:16+00:00</updated>
    <id>http://seshbot.com/blog/2014/01/15/creating-a-rails-plus-ember-app-from-scratch</id>
    <content type="html"><![CDATA[<p>Today I decided to wield my new Rails and Ember knowledge and&hellip; look into yet another new technology. I thought it would be helpful to have an online app to demonstrate the fruits of my labours, so am deploying a new app to <strong><a href="http://heroku.com">Heroku</a></strong>.</p>

<p>Heroku is an &lsquo;application platform&rsquo; in the cloud, meaning that you can push certain kinds of apps (written in Ruby, Python, Java and Node.js) and it will ensure all the correct infrastructure is in place. When you sign up you get to host one app for free so it&rsquo;s easy to try out.</p>

<p>Later I will probably move to <a href="http://aws.amazon.com">Amazon Web Services</a>, which provides a basic virtual machine in the cloud that you can do anything with. This will allow me to host multiple applications without having to worry about paying money. Heroku <em>does</em> offer some pretty nice scaling, monitoring and deployment tools though (the admin panel literally has a slider to allow you to spin up new application instances.)</p>

<p>This post shows how I went through all steps, including setting up the PostgreSQL database on OSX, creating a skeleton Rails app, and deploying to Heroku. It is a culmination of having gone through several sources:</p>

<ul>
<li>much was taken from this useful step-by-step &lsquo;<a href="http://www.devmynd.com/blog/2013-3-rails-ember-js">Rails + Ember blog post</a>&rsquo; and this <a href="http://www.devmynd.com/blog/2013-10-live-on-the-edge-with-rails-ember-js">follow up post</a> that incorporates changes for newer versions of the frameworks.</li>
<li>when I got to the part involving installing the &lsquo;ember-rails&rsquo; gem, I found that the <a href="https://github.com/emberjs/ember-rails">ember-rails documentation</a> was pretty useful.</li>
<li>some of the Heroku stuff came from the <a href="https://www.codeschool.com/code_tv/heroku">Heroku Code School lesson</a> summary.</li>
</ul>


<!-- more -->


<h2>Choosing a database</h2>

<p>By default Rails will use sqlite3 for its database, and this isn&rsquo;t by default available in Heroku. As I&rsquo;m going to have to do some configuration anyway, I might as well choose a nicer database.</p>

<p>I was deciding between MongoDb and PostgreSQL. MongoDb offers flexibility when it comes to managing file assets in your database, while PostgreSQL is much more well established in existing hosting infrastructures (AWS and Heroku), so can make initial deployment much simpler. Mongo is also more amenable to schema changes because it&rsquo;s a NoSQL schema-less document database, but I think Rails is supposed to make schema changes easy anyway with the various <code>db:</code> commands.</p>

<p>As Heroku comes with PostgreSQL support out of the box, for now I&rsquo;ll go with Postgres. I&rsquo;m as yet not very familiar with Heroku and want to make things easier on myself.</p>

<p>The following installation instructions came from a blog entry on <a href="http://ricochen.wordpress.com/2012/07/20/install-postgres-on-mac-os-x-lion-with-homebrew-howto/">installing PostgreSQL on OSX with HomeBrew</a>:
```bash Installing PostgreSQL on  OSX</p>

<h1>easiest if you have homebrew installed</h1>

<p>brew install postgresql</p>

<h1>ensure it starts up when your machine starts</h1>

<p>ln -sfv /usr/local/opt/postgresql/*.plist ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist
launchctl load ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist</p>

<h1>ensure you don&rsquo;t accidentally run the older version</h1>

<p>echo &lsquo;export PATH=/usr/local/bin:$PATH&rsquo; >> ~/.bash_profile &amp;&amp; . ~/.bash_profile</p>

<h1>create a database user for the application to use</h1>

<h1>(alternatively you should be able to run &lsquo;createuser -d myapp&rsquo;)</h1>

<p>psql postgres <code>whoami</code>
create role myapp with CREATEDB login password &lsquo;password1&rsquo;;
```</p>

<p><em>Notes:</em></p>

<ul>
<li><em>the <code>createuser</code> command can replace the <code>psql</code> command stuff: <code>createuser -d myapp</code></em></li>
<li><em>if the DB username is different to the application name (below) you&rsquo;ll need to change the rails configuration later so it knows which username to use</em></li>
<li><em>I assume Heroku doesn&rsquo;t require you to manage the database at all</em></li>
</ul>


<h2>Creating a simple Rails app</h2>

<p>Creating a Rails app is really simple <em>once you know the commands</em>. So from scratch, if you include all the learning involved behind each command, it&rsquo;s actually not very simple. But these steps make it simple for me.</p>

<p>TIPS: I read somewhere that you should always run <code>bundle exec</code> before running a rails command to ensure that you&rsquo;re only working with gems in your Gemfile. Technically you could run all the commands below without prepending <code>bundle exec</code> however.</p>

<p><code>bash Creating the rails application framework
rails new myapp --database=postgresql
cd myapp
vim config/database.yml # set the database username and password, and on OSX un-comment the 'local' setting
bundle exec rake db:create    # create databases
bundle exec rails generate scaffold Thing name:string # generate model/views/controllers
bundle exec rake db:migrate   # update database with model data
bundle exec rails s           # start rails server localhost:3000
</code></p>

<p><em>Note: I had to uncomment the &lsquo;local&rsquo; setting from my </em>database.yml<em> file because rails couldn&rsquo;t connect due to permission problems on the local socket file. I could have reconfigured postgres instead but meh.</em></p>

<p>OSX users can also use <a href="http://pow.cx/">POW!</a> or <a href="http://anvilformac.com/">Anvil</a> (which uses POW! under the covers) to set up a fake URL pointing to their local rails app directories, so in my case I can visit <a href="http://myapp.dev">http://myapp.dev</a> and it will actually show me the app running on my local machine. It makes the testing cycle a lot quicker.</p>

<p>Add some simple static content:
```bash Generate some simple content in the Rails app
rails generate controller StaticPages home about &mdash;no-test-framework</p>

<h1>set root &lsquo;/&rsquo; route to point to static home page</h1>

<p>vim config/routes.rb # add &ldquo;root &lsquo;static_pages#home&rsquo;&rdquo; beneath other routes
```</p>

<p>Now you should be able to visit <code>localhost:3000</code> and see a generic &lsquo;home&rsquo; page message.</p>

<!-- x_ -->


<h3>Check in to git</h3>

<p>This creates a local git repository, but during the heroku deployment step I&rsquo;ll push it over there too. I&rsquo;ll also push it to GitHub when it looks like more of an app. So in git parlance, this is what I&rsquo;ll have on my local machine:</p>

<p><center><img src='/images/plantuml/7ff3365c0f4bc5f7e2db66419707938a.png'></center></p>

<p><code>bash Create the local 'master' git repository
rake tmp:clear
git init .
git add -f *
git commit -a -m"Initial commit"
</code></p>

<p>I regularly run those <code>git</code> commands to make it easier to revert any mistakes I happen to make.</p>

<h3>Adding ember framework</h3>

<p>I have tried two alternative approaches to creating a new rails app for ember.</p>

<h4>Alternative 1: use the ember &lsquo;edge template&rsquo;</h4>

<p>I think this one is probably the best as it was demonstrated by Yehuda Katz (main Ember guy) in <a href="http://www.youtube.com/watch?v=BpQj9_qEUAc">this live demonstration video</a>. I ran a diff on projects created with and without and it seems to:</p>

<ul>
<li>adds some ember gems to the Gemfile: <code>active_model_serializers</code>, <code>ember-rails</code> and <code>ember-source</code></li>
<li>remove the rails &lsquo;application view layout&rsquo; (<em>app/views/layouts/application.html.erb</em>)</li>
<li>create an ember &lsquo;application template&rsquo; (<em>app/assets/javascripts/templates/application.handlebars</em>)</li>
<li>creates a &lsquo;view asset&rsquo; that generates an index.html with the ember application.js in it (<em>app/views/assets/index.html.erb</em>)</li>
<li>sets up a rails route pointing to the assets controller &lsquo;index&rsquo; action (<em>config/routes.rb</em>)</li>
<li>create empty assets controller and helper files (not sure why)</li>
<li>create a rails ActiveModel &lsquo;application serializer&rsquo; (<em>app/serializers/application_serializer.rb</em>) that does a few things ember requires <!-- x_ --></li>
</ul>


<p>Installing using the edge template is simple. Just replace the <code>rails new</code> step above with the following:</p>

<p>```bash Creating a rails app using the ember template
rails new myapp &mdash;database=postgresql -m <a href="http://emberjs.com/edge_template.rb">http://emberjs.com/edge_template.rb</a>
cd myapp</p>

<h1>edit your database config and Gemfile as before&hellip;</h1>

<p>```</p>

<p><em>Note: I had problems using the remote edge template, so downloaded it and used my local copy instad.</em></p>

<h4>Alternative 2: add ember to an existing rails app</h4>

<p>You could also just add the <code>ember-rails</code> gem directly to your Gemfile, then run <code>rails generate ember:bootstrap</code> and you get a basic Ember framework in your <code>app/assets</code> directory. I also prefer to use javascript directly (as opposed to CoffeeScript, which is the default), so add <code>-g --javascript-engine js</code></p>

<p>```bash Add a simple Ember application framework to the Rails app
vim Gemfile</p>

<h1>add &lsquo;gem &ldquo;ember-rails&rdquo;, github: &ldquo;emberjs/ember-rails&rdquo;&rsquo;</h1>

<p>```</p>

<p>Following this approach I believe you&rsquo;ll have to manually set up the <a href="https://github.com/rails-api/active_model_serializers">Ember ActiveModel Serializer</a> which was written by the Ember guys, and ensures your Ember app understands the format of your Rails app&rsquo;s JSON data. The first alternative does this for you.</p>

<h4>Common to both approaches</h4>

<p>After you have created and updated your Gemfile, you still need to bootstrap the ember environment, and then ensure Ember is running in &lsquo;development&rsquo; mode when Rails is.</p>

<p><em>Note: you can Set &lsquo;developer mode&rsquo; (which enables developer-centric error messages and is apparently quite useful) by updating your </em>config/environments/development.rb<em> with: <code>config.ember.variant = :development</code>. By default running locally will run in dev mode, and running on Heroku will run production mode however.</em></p>

<p>```bash Add a simple Ember application framework to the Rails app
bundle install
bundle exec rails g ember:bootstrap -g &mdash;javascript-engine js
bundle exec rails g ember:install &mdash;head</p>

<p>vim config/environments/development.rb # add config.ember.variant = :development
```</p>

<h2>Deploying to Heroku</h2>

<p>Heroku requires a few rails settings to be modified to work properly:</p>

<p>```bash Change rails app settings for Heroku
vim config/environments/production.rb # heroku runs in prod mode by default</p>

<h1>change &lsquo;config.serve_static_assets&rsquo; to true</h1>

<p>vim Gemfile</p>

<h1>add &ldquo;gem &lsquo;rails_12factor&rsquo;&rdquo;</h1>

<p>```</p>

<p>I have already gone through the Heroku sign up process and installed the toolbelt appropriate for OSX (the toolbelt provides the <code>heroku</code> command line tool), so I won&rsquo;t outline that here.</p>

<p>Installing my rails application on Heroku was then a simple matter of:</p>

<p>```bash Add application in the current directory to Heroku
heroku login
heroku create &mdash;stack cedar
git push heroku master</p>

<h1>whenever you make database changes</h1>

<p>heroku run rake db:migrate</p>

<h1>if you want to push your local database contents to heroku</h1>

<p>heroku db:push # requires the &lsquo;taps&rsquo; gem (&lsquo;gem install taps&rsquo;)
```</p>

<p>This creates an image with a particular configuration of applications and adds a <code>heroku</code> git remote to the git configuration.</p>

<p>Now you can visit the heroku app online (in my case at <a href="http://seshbot.herokuapp.com/">http://seshbot.herokuapp.com/</a>).</p>

<p>TODO: use <code>gem rails_12factor</code>? This alters the rails app a little to make it <a href="http://12factor.net/">12 factor</a>, which is a set of guidelines for how one should build an application to make it easier to administer and deploy. Not really important right now though.</p>

<!-- x_ -->


<h2>Troubleshooting and administering Heroku</h2>

<p><code>bash Various heroku debugging commands
heroku ps    # list running apps
heroku logs  # show application logs
heroku run console # run interactive ruby console
</code></p>

<p><code>bash Various heroku administrative commands
heroku config  # configure remote app through environment variables
heroku apps    # overview of apps
heroku destroy # deallocate remote server
heroku run rake db:migrate
</code></p>

<p><code>heroku config</code> sets environment variables for things you don&rsquo;t want to commit to git (e.g., passwords). Configure your Rails apps to use <code>ENV['MY_VAR']</code> instead of your super secret key, then run <code>heroku config:add MY_VAR=blahblah</code>.</p>

<p>There are also various <code>heroku pg:</code> commands for updating the application database. The application itself doesn&rsquo;t have full admin access to the database so you can&rsquo;t for example write <code>heroku run rake db:drop</code>. Instead you should run <code>heroku pg:reset</code> if you want to clear the database.</p>
]]></content>
  </entry>
  
</feed>
