<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Seshbot Programs]]></title>
  <link href="http://seshbot.com/atom.xml" rel="self"/>
  <link href="http://seshbot.com/"/>
  <updated>2014-01-04T11:07:50+09:00</updated>
  <id>http://seshbot.com/</id>
  <author>
    <name><![CDATA[Paul Cechner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScript in Modern Web Apps]]></title>
    <link href="http://seshbot.com/blog/2014/01/03/javascript-in-modern-web-apps/"/>
    <updated>2014-01-03T23:20:08+09:00</updated>
    <id>http://seshbot.com/blog/2014/01/03/javascript-in-modern-web-apps</id>
    <content type="html"><![CDATA[<p>The web development scene has moved dramatically since my own minor experience at an Internet business company 14 years ago. Back then we created <em>web pages</em> in ColdFusion/PHP/ASP marked-up HTML. Our main tools were frames and tables and a lot of homegrown convention to ensure headers/footers looked right. We spent most of our efforts on effectively using CSS to make our lives easier &ndash; not separating views from data or dynamically updating HTML elements.</p>

<p>People now create <em>web applications</em> instead of individual pages. Web apps look a lot like native applications, are responsive and dynamic, and have very high-level frameworks that provide application-wide abstractions for business models and the abstraction of the view logic.</p>

<p>This article describes my current understanding of the technologies used in constructing <em>modern</em> web applications, largely based on a few years&#8217; lurking on <a href="http://ycombinator.com">Hacker News</a> and a couple weeks&#8217; not-so-intense investigations.</p>

<!-- more -->


<h3>The importance of JavaScript</h3>

<p>Javascript is said to be the assembly language of the internet. It was created circa 1995 for Netscape Navigator 2.0 as part of a much grander vision for a global web platform. It is supported by all web browsers, and <a href="https://www.dartlang.org/">until recently</a> was the only language broadly enough available to do so.</p>

<p>Modern web applications are built many layers of abstraction on top of this. An extreme and relevant example of this is the <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest">XMLHttpRequest</a> (hereafter XHR) function. Prior to HTML5 WebSockets, all <a href="http://en.wikipedia.org/wiki/Single-page_application">single-page</a> web applications used this single function to receive dynamic updates from a remote server, through a technique commonly known as <a href="http://en.wikipedia.org/wiki/Ajax_%28programming%29">AJAX</a>. Likely few web apps actually use the function directly however &ndash; most these days use high-level <a href="http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">MVC frameworks</a> (more on these below) to connect the visual elements the user sees in their browser (the view) to entity abstractions updated from a remote server (the model).</p>

<p>It makes sense to me that any understanding of modern web applications would need to be partly underpinned by a solid understanding of JavaScript. It seems like a pretty icky language however, with a lot of weird behaviour ready to trip those unaware of its stupid idiosyncracies. Perhaps because it was <a href="http://www.computer.org/csdl/mags/co/2012/02/mco2012020007.html">rushed out in 10 days</a>.</p>

<p>Here&rsquo;s a few reading recommendations I would like to read one day:</p>

<ul>
<li><a href="http://eloquentjavascript.net/contents.html">Eloquent JavaScript</a> &ndash; basically an ebook that starts from the basics</li>
<li><a href="http://ejohn.org/apps/learn/">Learning Advanced JavaScript</a> &ndash; similar to above only presented as a slide deck with code samples</li>
<li><a href="http://news.ycombinator.com/item?id=3550998">Ask HN &ndash; JavaScript Dev Tools</a> &ndash; debugging in JavaScript</li>
<li><a href="http://michaux.ca/articles/mvc-architecture-for-javascript-applications">MVC Architecture for JS</a> &ndash; building an MVC framework in JS from scratch</li>
<li><a href="http://addyosmani.com/largescalejavascript/">Large-Scale JS Application Architecture</a> &ndash; a guy who knows his stuff on various approaches to building &lsquo;large&rsquo; web apps</li>
<li><a href="https://developer.mozilla.org/en-US/docs/JavaScript/Introduction_to_Object-Oriented_JavaScript">Mozilla Developer Network &ndash; Intro to OO JS</a> &ndash; everything you need to know on how <code>prototype</code> and <code>new</code> provide OO on top of simple JS function</li>
<li><a href="http://bonsaiden.github.com/JavaScript-Garden/#intro">JavaScript Garden</a> &ndash; a kind of FAQ on all the idiosyncracies of JS (how <code>this</code> works, for example)</li>
<li><a href="http://shichuan.github.io/javascript-patterns/">JavaScript Patterns</a> &ndash; a very nice looking reference on all facets of modern JS (including frameworks)</li>
<li><a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/">Learning JavaScript Design Patterns</a> &ndash; not sure if this is really useful yet, especially compared to the one directly above</li>
</ul>


<h3>JavaScript in the browser</h3>

<p>It&rsquo;s very difficult to figure out which of the myriad JS frameworks are worth investing in, as they come and go and are easily replacable. However some toolsets and frameworks have become totally indispensable timesavers to anyone making a web application.</p>

<ul>
<li><a href="http://jquery.com/">jQuery</a> &ndash; a low-level toolset that vastly simplifies common JS tasks such as manipulating the DOM and using XHR</li>
<li><a href="http://requirejs.org/">RequireJS</a> &ndash; a library that makes including third party modules simple</li>
<li><a href="http://handlebarsjs.com/">Handlebars</a> &ndash; a very popular template parser that uses <code>{{this}}</code> syntax</li>
<li><a href="http://backbonejs.org/">Backbone.js</a> &ndash; allows user-defined model objects to be dynamically linked up to HTML elements for automatic updates</li>
<li><a href="http://emberjs.com/">Ember.js</a> &ndash; an exciting MVC framework that I think is built on top of Handlebars and Backbone, or something like it. More below</li>
<li><a href="http://angularjs.org/">Angular.js</a> &ndash; a Google library that promises to deliver similar functionality as Ember.js, but with a syntax that is meant to look more like a natural extension of HTML</li>
</ul>


<h3>JavaScript on the server</h3>

<p>For some reason JavaScript has become a very popular language for performing server-side tasks as well. I think this has something to do with the recent popularity of the <a href="http://nodejs.org/">Node.js</a> JavaScript web application platform. Node was simplistic enough for people to write small but highly capable tools in a language with which they were already familiar. Regardless of the purpose, it is important to note that the fact that its use on the server side is largely unrelated to its
use in the browser.</p>

<p>I think I&rsquo;ll likely want to look into at least these frameworks:</p>

<ul>
<li><a href="https://npmjs.org/">npm</a> for javascript package installation</li>
<li><a href="http://yeoman.io/">Yeoman</a> provides a set of tools for creating and manipulating a web app on a workflow level</li>
<li><a href="http://bower.io/">Bower</a> for application dependency management. It automatically downloads and configures dependent frameworks for an app</li>
<li><a href="http://gruntjs.com/">Grunt</a> for running preconfigured tasks from a Gruntfile. For example running, testing and previewing web apps</li>
</ul>


<p>As an example of these technologies, here&rsquo;s what it takes to create a basic Ember.js application (a more in-depth starter can be found <a href="http://blog.embed.ly/post/46586649344/introduction-to-ember-development">here</a>):</p>

<figure class='code'><figcaption><span>Creating a new Ember.js application from scratch</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># install pre-requisite apps to your machine</span>
</span><span class='line'>apt-get install npm
</span><span class='line'>npm install -g yo grunt-cli bower
</span><span class='line'>npm install -g grunt-contrib-compass
</span><span class='line'>npm install -g generator-ember
</span><span class='line'>npm install -g grunt-mocha
</span><span class='line'>
</span><span class='line'>mkdir myapp <span class="o">&amp;&amp;</span> <span class="nb">cd </span>myapp
</span><span class='line'>yo ember       <span class="c"># create the application framework</span>
</span><span class='line'>bower install  <span class="c"># download pre-requisite libraries</span>
</span><span class='line'>grunt server   <span class="c"># start app on localhost:8000</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Serving and hosting web apps</h3>

<p>I&rsquo;ve been concentrating mostly on the browser end of the web application architecture equation. So far my thoughts on the matter of hosting haven&rsquo;t really gone too far. Two obvious options come to mind however.</p>

<p><strong>A Yeoman-generated Application</strong> that I think by default uses a simple web server like <a href="http://unicorn.bogomips.org/">Unicorn</a>, started from a Grunt script. There are plenty of instructions on the web for deploying these applications to Heroku or other hosting services.</p>

<p><strong>A Rails RESTful Application</strong> hosted on something like <abbr title="Amazon Web Services">AWS</abbr>. Ruby on Rails is a hefty web framework that also follows the MVC framework. I think it&rsquo;s a full-stack framework in its own right and prefers its own HTML templating engine. I intend to use it to expose a REST API instead of HTML however so I can totally separate the server logic from the UI framework, and perhaps write separate front-ends altogether.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Grand Experiment]]></title>
    <link href="http://seshbot.com/blog/2013/12/20/the-grand-experiment/"/>
    <updated>2013-12-20T10:07:06+09:00</updated>
    <id>http://seshbot.com/blog/2013/12/20/the-grand-experiment</id>
    <content type="html"><![CDATA[<p>A few months ago I decided to hand in my notice and live off my savings for a while. In 13 years of software development this is the first proper hiatus I&rsquo;ve taken so I have no idea what to expect.</p>

<p>I intend to spend the next six to twelve months attempting to see what happens when I have time to myself.</p>

<!-- more -->


<h3>So far&hellip;.</h3>

<p>This is only the first week of my grand experiment. So far I have spent most of it gaming with my other unemployed friends (Pathfinder card game is awesome.) I did set up this blog however, and register seshbot.com, so I suppose it&rsquo;s not a complete loss work-wise.</p>

<h3>Blogging</h3>

<p>I&rsquo;m excited about following an open development process. Source code is only a part of an application however, the analysis and design are integral pieces that I would like to make visible. I am concerned that setting up this blog before I have anything to show is setting the cart before the horse, but it seemed like the smallest most approachable project I could scope out for the first week.</p>

<p>The Octopress platform seems very developer-friendly. I can trivially embed syntax highlighted source code snippets and extend the framework through a simple plugin mechanism (I think.) There is no fancy web UI for composing posts &ndash; its all authoring markup on your local machine then pushing the generated code to github and letting github pages take care of the rest. Writing a new blog post is a matter of:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; <span class="nb">cd </span>seshbot
</span><span class='line'>&gt; rake new_post<span class="o">[</span><span class="s1">&#39;My New Post!&#39;</span><span class="o">]</span>
</span><span class='line'><span class="c"># Creating new post: source/_posts/2013-12-20-my-new-post.markdown</span>
</span><span class='line'>&gt; vim <span class="nb">source</span>/_posts/2013-12-20-my-new-post.markdown
</span><span class='line'>&gt; rake generate
</span><span class='line'><span class="c"># Successfully generated site: source -&gt; public</span>
</span><span class='line'>&gt; rake deploy
</span><span class='line'><span class="c"># Generating Site with Jekyll</span>
</span><span class='line'><span class="c"># Copying public to _deploy</span>
</span><span class='line'><span class="c"># Pushing generated _deploy website</span>
</span><span class='line'><span class="c"># Github Pages deploy complete</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s of course so much more you can do (preview it locally before uploading for example) but that&rsquo;s the basic workflow.</p>

<h3>Project</h3>

<p>I have a bunch of stuff I want to mess with, but I intend to start writing a few simple web applications. I have in mind some kind of Ruby-on-Rails stack using <a href="http://emberjs.com/">Ember.js</a> for the browser&rsquo;s UI modeling. A shared drawing application perhaps?</p>

<p>Also, I would love to mess around more with C++11/C++14, I have played a little so far and have been very impressed with the productivity and conciseness it affords (it&rsquo;s about time!) A little network game perhaps? I really would love to make a little modular adventure game at some stage. Who knows, perhaps I will be the one to finally make a nice graphical <a href="http://www.bay12games.com/dwarves/">Dwarf Fortress</a> clone? That seems to be the indy gaming unicorn.</p>

<h3>Japan Lifestyle</h3>

<p>So far I have been fortunate but it can be frustrating at times. Living in Japan without a job is a little challenging, though I suspect that would be true in most countries. The immediate challenges are keeping my house (I must renew my lease and they weren&rsquo;t too impressed with the blank &lsquo;employment&rsquo; section of the document) and preparing to pay the various taxes &ndash; most notably residential tax and health insurance, both of which are means-based on the previous years income.</p>

<p>I was very happy to discover that just around the corner from my house is a little cafe run by a very friendly independent game-developer &ndash; <a href="http://picopicocafe.com">PicoPico cafe</a>. Once a month they hold &lsquo;PicoTachi&rsquo;, an event for independent developers (and anyone else really) to show off stuff they&rsquo;ve been working on. That seems almost too fortuitous! I am also looking forward to working in the cafe by myself, it has a very nice ambiance.</p>
]]></content>
  </entry>
  
</feed>
