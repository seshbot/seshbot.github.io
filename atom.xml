<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Seshbot Programs]]></title>
  <link href="http://seshbot.com/atom.xml" rel="self"/>
  <link href="http://seshbot.com/"/>
  <updated>2014-01-07T07:50:48+09:00</updated>
  <id>http://seshbot.com/</id>
  <author>
    <name><![CDATA[Paul Cechner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What's so hard about programming?]]></title>
    <link href="http://seshbot.com/blog/2014/01/06/whats-so-hard-about-programming/"/>
    <updated>2014-01-06T20:19:49+09:00</updated>
    <id>http://seshbot.com/blog/2014/01/06/whats-so-hard-about-programming</id>
    <content type="html"><![CDATA[<p>It is a fact that every programmer is the best of his peer group, and would spin out the most awesome cleanly-built apps if only he or she didn&rsquo;t have to work in his current circumstances. It is also a fact that every programmer understands that he was terribly misguided just a few years prior.</p>

<p>Given these two facts, I would have to have an abundance of overconfidence to give advice on programming to other programmers. However, I happen to know that <em>I</em> am in fact a better programmer than most, and am therefore uniquely qualified to give such advice.</p>

<p>So here&rsquo;s some of the things I feel I&rsquo;ve learned the hard way &ndash; at least enough that every time I work on a project they jump to mind and guide my actions.</p>

<!-- more -->


<h3>Which are the best technologies?</h3>

<p>Programming languages are tricky to learn, and programmers have a vested interest in believing that the technologies they know best are the most appropriate technologies to use for every task. For the purposes of this article, those people will be known as <em>curmudgeons</em>.</p>

<p>Curmudgeons often avoid learning more than their one favourite language. I spent about 8 years programming exclusively in C++ before I finally took the jump to another language, and that point represented a refreshingly great learning curve for me. I love C++ but there&rsquo;s features that it simply does not have. So I&rsquo;ll demonstrate by talking about C++ from a curmudgeonly perspective.</p>

<p>C++ does not have reflection, and I used to (and still do) think it can make code hard to understand and follow. However reflection is valuable during application bootstrapping for stringing together components at the highest level using dependency injection containers, for example.</p>

<p>C++ does not have garbage collection. I believe languages that use GC tend to make managing resources other than memory difficult, which makes a lot of code difficult to deal with. However dealing with certain problems <em>without</em> GC can be very tricky or even impossible &ndash; typically anything where the lifetime of an entity cannot be easily dealt with at coding time, such as lambdas with closures, or <a href="http://en.wikipedia.org/wiki/Persistent_data_structure">&lsquo;persistent&rsquo; data structures</a> (a la <a href="http://clojure.org/data_structures">clojure&rsquo;s data structures</a>), or often many other situations in multi-threaded applications.</p>

<p>C++&rsquo;s standard libraries are incredibly low-level (you&rsquo;d look long and never find the word &lsquo;web&rsquo;, &lsquo;service&rsquo; or &lsquo;actor&rsquo;) and the standard is <em>incredibly</em> slow moving (only recently got threading support, lambdas or regular expressions!) However this is a side-effect of the fact that the language is intended to be long-lived, clearly something it&rsquo;s been very successful at.</p>

<p><span class='pullquote-right' data-pullquote='there are no crappy technologies - only situations where technologies are perhaps not applicable'>
So while I believe the functionality of these &lsquo;friendlier&rsquo; languages are often grossly misused or are considered to solve problems they do not in fact solve well, I also know first-hand how awesome they can be in certain specific scenarios. I now believe that there are no crappy technologies &ndash; only situations where technologies are perhaps not applicable.
</span></p>

<p>Need super high performance? C or C++ is great if you know it really well, as an explicit goal of the language is that all features should come at no hidden cost, which is often a detriment to the language&rsquo;s simplicity. If you or the majority of your team is not familiar with the language however, it will probably not go well. If you are writing a large application, or need to quickly pump out a web service or componentised application, it simply might not be the right tool for the job.</p>

<p>It might be surprising but there are an equal number of curmudgeons using newer languages such as Java, JavaScript and Scala as well. While C++ curmudgeons will tell you that high-level facilities offered by new generation languages (GC etc) are not truly useful, higher-level language curmudgeons will tell you that the performance of their tools are equal, or somehow better than, lower-level languages. Actually, from the perspective that a well-maintained application tends to run smoother this is sometimes true. However from the truest apples-to-apples sense this is rarely true.</p>

<p>As an example, an often-cited comparison is that between garbage collecting heap allocated memory and the typical semi-manual approach taken by C++. Of course collecting a load of memory at one time is more efficient than individual de-allocations. It&rsquo;s easy to see the problem here &ndash; programmers not familiar with the intricacies of low-level memory management would not understand stack-based allocation or custom allocators, which often offer effectively zero cost as they elide the need to deallocate at all, and so these people leave these concepts out of the equation.</p>

<p>A smart programmer would believe that if a language was created, still exists and has a large user base, it probably has a good reason to be around. A programmer that knows more language is almost by definition more well equipped to tackle problems more easily.</p>

<h3>What&rsquo;s the difference between Analysis and Design?</h3>

<p>Many programmers don&rsquo;t separate the notion of analysis from design. In fact, it would be less charitable but more realistic to say that most programmers don&rsquo;t fully know what analysis is for.</p>

<p>The first step in any project is to understand the requirements &ndash; a process that requires a very thorough analysis phase. A thorough analysis will capture all requirements in a language comfortable to the client, create a domain model that the client agrees captures all of the concepts (entities, events, roles, etc) in the system, and give a good representation of the scope that is being tackled (a complete list of actors interacting and their useage scenarios the application will satisfy.) If you tackle a problem without this knowledge, you don&rsquo;t fully understand the problem and therefore are not yet qualified to fix it.</p>

<p><span class='pullquote-left' data-pullquote='Every requirement accurately captured represents a significant amount of effort saved'>
The agile principle of avoiding &lsquo;big design up-front&rsquo; leads people to avoid performing full analysis up front, which is very misguided. Every requirement accurately captured represents a significant amount of effort saved in large refactorings, or worse yet continual effort working around mis-designed systems.
</span></p>

<p>Analysis is important and should be done as completely as possible, lest the wrong application get built. Design is incremental but done continually. While analysis documents tend to be fairly static and only change if the actual requirements change, design documents are often not useful much past the development of the code they relate to. For this reason they&rsquo;re usually only useful for reasoning about and communicating a plan of attack for an upcoming component being created or worked on.</p>

<h3>Have we estimated enough time?</h3>

<p>Estimation is said to be the hardest part of programming. It is fricken hard. But usually it becomes much more approachable once the complete scope has been explored &ndash; if every piece of functionality to be delivered is decomposed into the smallest deliverable increments that the client can verify (often known as user stories in agile terminology), and these dozens or sometimes hundreds of stories can be individually and honestly estimated, a rough estimate may be reached.</p>

<p>More importantly however, if you find yourself 10% of the way into the stories of a project, you have the ability to re-evaluate your estimate of the remaining portion based on how long the first bit took. This process should replace all these &lsquo;double and add your grandmothers age&rsquo; type estimates, though they require some bravery both on behalf of the developers and the business people.</p>

<p>As a bonus, if the stories were separated into must-, should-, and might-haves, a certain amount of flexibility is built into the system where the portion to be delivered becomes negotiable based on revised estimates.</p>

<h3>Have we completed our design?</h3>

<p>Every time I design a new component I go through a few steps. I find that these are often not considered when estimating the time required to implement new functionality.</p>

<ul>
<li>most importantly, for every entity in the system <strong>consider how the entity will change over time</strong> &ndash; it&rsquo;s simple to represent an order in an online shopping system, but what if it gets cancelled or amended? What if the user account is deleted? What if an item is recalled by the manufacturer?</li>
<li><strong>how will the new component be administered and configured?</strong> This means APIs and user interfaces, which are not glamorous but need to be made.</li>
<li>when modeling the major entities, <strong>model all incoming commands and events</strong> as well &ndash; a good way to tell if there&rsquo;s an event missing is if two entities are relating directly to each other. This also yields heaps of other benefits (see <a href="http://martinfowler.com/eaaDev/EventSourcing.html">event sourcing</a> for example).</li>
<li><strong>separate each entity from the value data associated with that entity.</strong> Entities have identity and usually a long lifetime, and are changed many times throughout their life.</li>
</ul>


<p>These topics are actually huge but these most readily to mind.</p>

<h3>Is UML necessary?</h3>

<p>This is a little anachronystic these days, I don&rsquo;t see many people jumping on the UML bandwagon anymore &ndash; if anything it&rsquo;s swung the other way, which is no better really. But it can seem sometimes that UML is some kind of all-or-none proposition.</p>

<p>Many treat UML as a kind of <em>process</em>, when in fact it is a collection of <em>languages</em>. And like any language, it is there to be used primarily for communication. It makes little sense to have a process that revolves around UML per se, but I find that certain diagrams are arguably the best way to express certain ideas.</p>

<p><em>During analysis</em>: <strong>use case diagrams</strong> are great for outlining scope; <strong>domain models</strong> are fantastic for discovering the main concepts in a system and are great to carry to early client meetings; and <strong>state diagrams</strong> can <em>really</em> save a lot of time later on down the line (entity states are deceptively tricky to discover.)</p>

<p><em>During design</em>: these are totally situational, but <strong>component diagrams</strong> show how all the services and applications hang together, where message busses are and how high-availability and how other such architectural concerns are handled; I often find myself sketching out <strong>class diagrams</strong> aplenty to provoke discussions on my immediate plans; and I email tons of <strong>sequence diagrams</strong> around indicating the intricate details on how components coordinate their interactions.</p>

<p>In all, UML is neither good nor bad, it is a set of tools you may decide to use when communicating about software.</p>

<h3>Will Design Patterns save us?</h3>

<p>There are a lot of good books out there detailing a lot of good design patterns. These patterns take many forms but there is a common unifying factor of all of them &ndash; they don&rsquo;t actually do anything by themselves (otherwise they&rsquo;d be applications or services.) They can be very useful for two purposes &ndash; describing the design of a system to others, or reason about how a part of a problem might decompose into a set of entities, values and relationships.</p>

<p>The problem comes in when the design patterns book comes out as the first step in creating a new application. No matter the problem, the first step should always be to understand the problem through <em>analysis</em>, and then the first step of design should be something like figuring out the major components in the system or the data in/out and transforms, depending on the situation. The design patterns emerge from this process, and the books are useful for recognising them, not guiding the design process.</p>

<p>Interestingly, design patterns are more important to imperative languages than declarative ones &ndash; imperative languages are by their nature higher level and the abstractions that design pattern books enumerate tend to fall out much more naturally without a lot of effort. Functional language curmudgeons are oft quoted as saying that design patterns are missing language features. I&rsquo;m not entirely convinced of this perspective, but it does show how genuinely powerful those languages are at expressing high level concepts simply.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript in Modern Web Apps]]></title>
    <link href="http://seshbot.com/blog/2014/01/03/javascript-in-modern-web-apps/"/>
    <updated>2014-01-03T23:20:08+09:00</updated>
    <id>http://seshbot.com/blog/2014/01/03/javascript-in-modern-web-apps</id>
    <content type="html"><![CDATA[<p>The web development scene has moved dramatically since my own minor experience at an Internet business company 14 years ago. Back then we created <em>web pages</em> in ColdFusion/PHP/ASP marked-up HTML. Our main tools were frames and tables and a lot of homegrown convention to ensure headers/footers looked right. We spent most of our efforts on effectively using CSS to make our lives easier &ndash; not separating views from data or dynamically updating HTML elements.</p>

<p>People now create <em>web applications</em> instead of individual pages. Web apps look a lot like native applications, are responsive and dynamic, and have very high-level frameworks that provide application-wide abstractions for business models and the abstraction of the view logic.</p>

<p>This article describes my current understanding of the technologies used in constructing <em>modern</em> web applications, largely based on a few years&#8217; lurking on <a href="http://ycombinator.com">Hacker News</a> and a couple weeks&#8217; not-so-intense investigations.</p>

<!-- more -->


<h3>The importance of JavaScript</h3>

<p>Javascript is said to be the assembly language of the internet. It was created circa 1995 for Netscape Navigator 2.0 as part of a much grander vision for a global web platform. It is supported by all web browsers, and <a href="https://www.dartlang.org/">until recently</a> was the only language broadly enough available to do so.</p>

<p>Modern web applications are built many layers of abstraction on top of this. An extreme and relevant example of this is the <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest">XMLHttpRequest</a> (hereafter XHR) function. Prior to HTML5 WebSockets, all <a href="http://en.wikipedia.org/wiki/Single-page_application">single-page</a> web applications used this single function to receive dynamic updates from a remote server, through a technique commonly known as <a href="http://en.wikipedia.org/wiki/Ajax_%28programming%29">AJAX</a>. Likely few web apps actually use the function directly however &ndash; most these days use high-level <a href="http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">MVC frameworks</a> (more on these below) to connect the visual elements the user sees in their browser (the view) to entity abstractions updated from a remote server (the model).</p>

<p>It makes sense to me that any understanding of modern web applications would need to be partly underpinned by a solid understanding of JavaScript. It seems like a pretty icky language however, with a lot of weird behaviour ready to trip those unaware of its stupid idiosyncracies. Perhaps because it was <a href="http://www.computer.org/csdl/mags/co/2012/02/mco2012020007.html">rushed out in 10 days</a>.</p>

<p>Here&rsquo;s a few reading recommendations I would like to read one day:</p>

<ul>
<li><a href="http://eloquentjavascript.net/contents.html">Eloquent JavaScript</a> &ndash; basically an ebook that starts from the basics</li>
<li><a href="http://ejohn.org/apps/learn/">Learning Advanced JavaScript</a> &ndash; similar to above only presented as a slide deck with code samples</li>
<li><a href="http://news.ycombinator.com/item?id=3550998">Ask HN &ndash; JavaScript Dev Tools</a> &ndash; debugging in JavaScript</li>
<li><a href="http://michaux.ca/articles/mvc-architecture-for-javascript-applications">MVC Architecture for JS</a> &ndash; building an MVC framework in JS from scratch</li>
<li><a href="http://addyosmani.com/largescalejavascript/">Large-Scale JS Application Architecture</a> &ndash; a guy who knows his stuff on various approaches to building &lsquo;large&rsquo; web apps</li>
<li><a href="https://developer.mozilla.org/en-US/docs/JavaScript/Introduction_to_Object-Oriented_JavaScript">Mozilla Developer Network &ndash; Intro to OO JS</a> &ndash; everything you need to know on how <code>prototype</code> and <code>new</code> provide OO on top of simple JS function</li>
<li><a href="http://bonsaiden.github.com/JavaScript-Garden/#intro">JavaScript Garden</a> &ndash; a kind of FAQ on all the idiosyncracies of JS (how <code>this</code> works, for example)</li>
<li><a href="http://shichuan.github.io/javascript-patterns/">JavaScript Patterns</a> &ndash; a very nice looking reference on all facets of modern JS (including frameworks)</li>
<li><a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/">Learning JavaScript Design Patterns</a> &ndash; not sure if this is really useful yet, especially compared to the one directly above</li>
</ul>


<h3>JavaScript in the browser</h3>

<p>It&rsquo;s very difficult to figure out which of the myriad JS frameworks are worth investing in, as they come and go and are easily replacable. However some toolsets and frameworks have become totally indispensable timesavers to anyone making a web application.</p>

<ul>
<li><a href="http://jquery.com/">jQuery</a> &ndash; a low-level toolset that vastly simplifies common JS tasks such as manipulating the DOM and using XHR</li>
<li><a href="http://requirejs.org/">RequireJS</a> &ndash; a library that makes including third party modules simple</li>
<li><a href="http://handlebarsjs.com/">Handlebars</a> &ndash; a very popular template parser that uses <code>{{this}}</code> syntax</li>
<li><a href="http://backbonejs.org/">Backbone.js</a> &ndash; allows user-defined model objects to be dynamically linked up to HTML elements for automatic updates</li>
<li><a href="http://emberjs.com/">Ember.js</a> &ndash; an exciting MVC framework that I think is built on top of Handlebars and Backbone, or something like it. More below</li>
<li><a href="http://angularjs.org/">Angular.js</a> &ndash; a Google library that promises to deliver similar functionality as Ember.js, but with a syntax that is meant to look more like a natural extension of HTML</li>
</ul>


<h3>JavaScript on the server</h3>

<p>For some reason JavaScript has become a very popular language for performing server-side tasks as well. I think this has something to do with the recent popularity of the <a href="http://nodejs.org/">Node.js</a> JavaScript web application platform. Node was simplistic enough for people to write small but highly capable tools in a language with which they were already familiar. Regardless of the purpose, it is important to note that the fact that its use on the server side is largely unrelated to its
use in the browser.</p>

<p>I think I&rsquo;ll likely want to look into at least these frameworks:</p>

<ul>
<li><a href="https://npmjs.org/">npm</a> for javascript package installation</li>
<li><a href="http://yeoman.io/">Yeoman</a> provides a set of tools for creating and manipulating a web app on a workflow level</li>
<li><a href="http://bower.io/">Bower</a> for application dependency management. It automatically downloads and configures dependent frameworks for an app</li>
<li><a href="http://gruntjs.com/">Grunt</a> for running preconfigured tasks from a Gruntfile. For example running, testing and previewing web apps</li>
</ul>


<p>As an example of these technologies, here&rsquo;s what it takes to create a basic Ember.js application (a more in-depth starter can be found <a href="http://blog.embed.ly/post/46586649344/introduction-to-ember-development">here</a>):</p>

<figure class='code'><figcaption><span>Creating a new Ember.js application from scratch</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># install pre-requisite apps to your machine</span>
</span><span class='line'>apt-get install npm
</span><span class='line'>npm install -g yo grunt-cli bower
</span><span class='line'>npm install -g grunt-contrib-compass
</span><span class='line'>npm install -g generator-ember
</span><span class='line'>npm install -g grunt-mocha
</span><span class='line'>
</span><span class='line'>mkdir myapp <span class="o">&amp;&amp;</span> <span class="nb">cd </span>myapp
</span><span class='line'>yo ember       <span class="c"># create the application framework</span>
</span><span class='line'>bower install  <span class="c"># download pre-requisite libraries</span>
</span><span class='line'>grunt server   <span class="c"># start app on localhost:8000</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Serving and hosting web apps</h3>

<p>I&rsquo;ve been concentrating mostly on the browser end of the web application architecture equation. So far my thoughts on the matter of hosting haven&rsquo;t really gone too far. Two obvious options come to mind however.</p>

<p><strong>A Yeoman-generated Application</strong> that I think by default uses a simple web server like <a href="http://unicorn.bogomips.org/">Unicorn</a>, started from a Grunt script. There are plenty of instructions on the web for deploying these applications to Heroku or other hosting services.</p>

<p><strong>A Rails RESTful Application</strong> hosted on something like <abbr title="Amazon Web Services">AWS</abbr>. Ruby on Rails is a hefty web framework that also follows the MVC framework. I think it&rsquo;s a full-stack framework in its own right and prefers its own HTML templating engine. I intend to use it to expose a REST API instead of HTML however so I can totally separate the server logic from the UI framework, and perhaps write separate front-ends altogether.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Grand Experiment]]></title>
    <link href="http://seshbot.com/blog/2013/12/20/the-grand-experiment/"/>
    <updated>2013-12-20T10:07:06+09:00</updated>
    <id>http://seshbot.com/blog/2013/12/20/the-grand-experiment</id>
    <content type="html"><![CDATA[<p>A few months ago I decided to hand in my notice and live off my savings for a while. In 13 years of software development this is the first proper hiatus I&rsquo;ve taken so I have no idea what to expect.</p>

<p>I intend to spend the next six to twelve months attempting to see what happens when I have time to myself.</p>

<!-- more -->


<h3>So far&hellip;.</h3>

<p>This is only the first week of my grand experiment. So far I have spent most of it gaming with my other unemployed friends (Pathfinder card game is awesome.) I did set up this blog however, and register seshbot.com, so I suppose it&rsquo;s not a complete loss work-wise.</p>

<h3>Blogging</h3>

<p>I&rsquo;m excited about following an open development process. Source code is only a part of an application however, the analysis and design are integral pieces that I would like to make visible. I am concerned that setting up this blog before I have anything to show is setting the cart before the horse, but it seemed like the smallest most approachable project I could scope out for the first week.</p>

<p>The Octopress platform seems very developer-friendly. I can trivially embed syntax highlighted source code snippets and extend the framework through a simple plugin mechanism (I think.) There is no fancy web UI for composing posts &ndash; its all authoring markup on your local machine then pushing the generated code to github and letting github pages take care of the rest. Writing a new blog post is a matter of:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; <span class="nb">cd </span>seshbot
</span><span class='line'>&gt; rake new_post<span class="o">[</span><span class="s1">&#39;My New Post!&#39;</span><span class="o">]</span>
</span><span class='line'><span class="c"># Creating new post: source/_posts/2013-12-20-my-new-post.markdown</span>
</span><span class='line'>&gt; vim <span class="nb">source</span>/_posts/2013-12-20-my-new-post.markdown
</span><span class='line'>&gt; rake generate
</span><span class='line'><span class="c"># Successfully generated site: source -&gt; public</span>
</span><span class='line'>&gt; rake deploy
</span><span class='line'><span class="c"># Generating Site with Jekyll</span>
</span><span class='line'><span class="c"># Copying public to _deploy</span>
</span><span class='line'><span class="c"># Pushing generated _deploy website</span>
</span><span class='line'><span class="c"># Github Pages deploy complete</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s of course so much more you can do (preview it locally before uploading for example) but that&rsquo;s the basic workflow.</p>

<h3>Project</h3>

<p>I have a bunch of stuff I want to mess with, but I intend to start writing a few simple web applications. I have in mind some kind of Ruby-on-Rails stack using <a href="http://emberjs.com/">Ember.js</a> for the browser&rsquo;s UI modeling. A shared drawing application perhaps?</p>

<p>Also, I would love to mess around more with C++11/C++14, I have played a little so far and have been very impressed with the productivity and conciseness it affords (it&rsquo;s about time!) A little network game perhaps? I really would love to make a little modular adventure game at some stage. Who knows, perhaps I will be the one to finally make a nice graphical <a href="http://www.bay12games.com/dwarves/">Dwarf Fortress</a> clone? That seems to be the indy gaming unicorn.</p>

<h3>Japan Lifestyle</h3>

<p>So far I have been fortunate but it can be frustrating at times. Living in Japan without a job is a little challenging, though I suspect that would be true in most countries. The immediate challenges are keeping my house (I must renew my lease and they weren&rsquo;t too impressed with the blank &lsquo;employment&rsquo; section of the document) and preparing to pay the various taxes &ndash; most notably residential tax and health insurance, both of which are means-based on the previous years income.</p>

<p>I was very happy to discover that just around the corner from my house is a little cafe run by a very friendly independent game-developer &ndash; <a href="http://picopicocafe.com">PicoPico cafe</a>. Once a month they hold &lsquo;PicoTachi&rsquo;, an event for independent developers (and anyone else really) to show off stuff they&rsquo;ve been working on. That seems almost too fortuitous! I am also looking forward to working in the cafe by myself, it has a very nice ambiance.</p>
]]></content>
  </entry>
  
</feed>
