<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Seshbot Programs]]></title>
  <link href="http://seshbot.com/atom.xml" rel="self"/>
  <link href="http://seshbot.com/"/>
  <updated>2014-01-14T16:05:42+09:00</updated>
  <id>http://seshbot.com/</id>
  <author>
    <name><![CDATA[Paul Cechner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learning Ruby and Rails]]></title>
    <link href="http://seshbot.com/blog/2014/01/14/learning-ruby-and-rails/"/>
    <updated>2014-01-14T10:32:29+09:00</updated>
    <id>http://seshbot.com/blog/2014/01/14/learning-ruby-and-rails</id>
    <content type="html"><![CDATA[<p><em>Note: The formatting of this article is not great, but I pumped it out quickly after going through the tutorials</em></p>

<p>I dedicated this morning to learning some Ruby and Ruby on Rails (RoR). For my purposes, RoR provides the server-side API to a web application, like this:</p>

<center><img src='http://seshbot.com/images/plantuml/dc42b2dad537dd0af4f1a7d3eed736ba.png'></center>


<p>To my delight, I quickly discovered that Ember (which I have been messing around with quite a bit) is modelled directly on Rails &ndash; not just in the generic they-are-both-MVC-architectures-way, but down to their usages being identical in many respects. I think many new webby techs follow this same style (Meteor seems to, for example.)</p>

<p>This post outlines the core concepts I have picked up from the various tutorials. I also included a RoR cheat-sheet I created while doing the Rails tutorial.</p>

<p>To get started on Windows/Mac, I&rsquo;m guessing the easiest way is by downloading the <a href="http://railsinstaller.org">RailsInstaller</a>.</p>

<!-- more -->


<h2>Learning Ruby</h2>

<p>For an absolute beginner, <a href="http://tryruby.org">Try Ruby</a> takes about 30 minutes, and will show the very basics:</p>

<ul>
<li>basic syntax</li>
<li>standard data structures (strings, arrays, hashes)</li>
<li>defining methods</li>
<li>defining classes (basics on attributes and <code>initialize</code> method)</li>
</ul>


<p>It stays very high-level, but obviously that&rsquo;s the intention. It avoids going into language features such as reflection, lambdas, string manipulation (<code>mystring = "var is #{my-var}"</code>), and doesn&rsquo;t talk about administration etc.</p>

<p>See the <a href="http://ruby-doc.org/core-2.1.0/">Ruby core documentation</a> for reference material.</p>

<h2>Learning Rails</h2>

<p>First, some language references: <a href="http://api.rubyonrails.org">Rails API docs</a> or <a href="http://apidock.com/rails">API Dock</a> or the other seachable <a href="http://railsapi.com">Rails API docs</a> can be downloaded and used locally.</p>

<p>I chose to follow the <a href="http://railsforzombies.org" title="">Rails for Zombies</a> tutorial, as it is often quoted as being helpful as a fully interactive online tutorial. It takes a few hours, but does seem to cover all the fundamentals, namely:</p>

<ul>
<li>Rails conventions

<ul>
<li>syntax for creation, read, update and delete of entities in the database</li>
<li>naming conventions for database table, view, and controller lookup</li>
</ul>
</li>
<li>Models

<ul>
<li>model class structure</li>
<li>invoking <abbr title="Create, Read, Update, Delete">CRUD</abbr> operations on the models</li>
<li>how relationships between entities are expressed, and how they map to the database structure</li>
</ul>
</li>
<li>Views

<ul>
<li>syntax (<code>&lt;% %&gt;</code> and <code>&lt;%= %&gt;</code>)</li>
<li>lookup from URL (searches <code>app/assets</code> folder before trying to run rails routes)</li>
<li>helpers (<code>link_to</code>, <code>edit_thing_path</code> etc)</li>
</ul>
</li>
<li>Controllers

<ul>
<li>controller class structure</li>
<li>rendering alternative views</li>
<li>rendering alternative formats (json, xml)</li>
<li>session variables (used for basic auth checks)</li>
<li>factoring out and configuring common code performed on all actions</li>
</ul>
</li>
<li>Routes

<ul>
<li>defining RESTful resources (automatically direct requests to controllers/views)</li>
<li>defining custom routes</li>
<li>creating helpers for <code>link_to</code> when creating custom routes</li>
</ul>
</li>
</ul>


<p>I think there are a few bugs in the programme however:</p>

<ul>
<li>the tutorial videos are a bit out of date (for pre-3.0 versions of RoR) but the practical exams use post-3.0 RoR it seems</li>
<li>the last prac exam requires different syntax than that in the tutorial:

<ul>
<li>redirect controller#action case is different (from vids, Zombies#undead, in prac zombies#undead</li>
<li>redirect requires prefix &lsquo;/&rsquo; (&lsquo;/zombies => &rsquo;/undead&#8217;) didnt in the tut</li>
</ul>
</li>
</ul>


<h3>Rails Cheat Sheet</h3>

<p>I created this while going through the Zombies tutorial. There&rsquo;s probably better cheat sheets out there, but I highly recommend creating your own as a learning experience.</p>

<h4>RoR&rsquo;s Ruby API syntax</h4>

<ul>
<li>Entity creation syntax (note, Rails will generate an ID for you):

<ul>
<li><code>t = Thing.new; t.status = "something"; t.save</code></li>
<li><code>t = Thing.new(:status =&gt; "something"); t.save</code></li>
<li><code>Thing.create(:status =&gt; "something")</code></li>
</ul>
</li>
<li>Entity query syntax:

<ul>
<li><code>Thing.find(1)</code> (by ID)</li>
<li>many alternate query methods: <code>first</code>, <code>last</code>, <code>all</code>, <code>count</code>, <code>order(:status)</code>, <code>limit(n)</code>, <code>where(:status =&gt; "good")</code></li>
<li>performance note: queries are performed on DB</li>
<li>syntax note: may also chain methods</li>
</ul>
</li>
<li>Entity update syntax:

<ul>
<li><code>t = Thing.find(id); t.status = "bad"; t.save</code></li>
<li><code>...; t.attributes = { :status =&gt; "bad"; ... }; save</code></li>
<li><code>...; t.update_attributes(:status =&gt; "bad"; ...}</code> (no save)</li>
</ul>
</li>
<li>Entity deletion syntax:

<ul>
<li><code>t = Thing.find(id); t.destroy</code></li>
<li><code>Thing.destroy_all</code></li>
</ul>
</li>
<li>on <code>save</code> failure, try <code>t.errors</code> to investigate what went wrong</li>
</ul>


<h4>Models</h4>

<p>Default model definition goes in <code>app/models/thing.rb</code></p>

<figure class='code'><figcaption><span>A simple model of a &#8216;thing&#8217; that has a &#8216;status&#8217; attribute</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Thing</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>   <span class="c1"># validation</span>
</span><span class='line'>   <span class="c1">#</span>
</span><span class='line'>   <span class="n">validates_presence_of</span> <span class="ss">:status</span> <span class="c1"># mandatory fields</span>
</span><span class='line'>   <span class="c1"># many other validations: e.g., uniqueness, format, conf/acceptance, etc</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1"># alternative validation syntax:</span>
</span><span class='line'>   <span class="n">validates</span> <span class="ss">:status</span><span class="p">,</span> <span class="ss">:presence</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="c1">#, :length =&gt; { :minimum =&gt; 3 }</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1"># relationships (reflected in DB)</span>
</span><span class='line'>   <span class="c1">#</span>
</span><span class='line'>   <span class="n">belongs_to</span> <span class="ss">:person</span>
</span><span class='line'>   <span class="c1"># the Person will have &#39;has_many :things&#39; (note plural)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Views</h4>

<ul>
<li><code>thing</code> default view definition goes in <code>app/views/things/index.html.erb</code> and <code>app/views/things/show.html.erb</code>):

<ul>
<li>alternatives actions to <code>show</code> can be added as <code>myaction.html.erb</code></li>
</ul>
</li>
<li>evaluate code with <code>&lt;% ruby code %&gt;</code>, eval and print with <code>&lt;%= ruby code %&gt;</code></li>
<li>shared application stuff (header/footer) goes in <code>app/views/layouts/application.html.erb</code> (use <code>&lt;%= yield %&gt;</code> for body placeholder)

<ul>
<li><code>&lt;%= stylesheet_link_tag :all %&gt;</code> renders stylesheet links for all files in <code>app/assets/stylesheets/</code></li>
<li><code>&lt;%= javascript_include_tag :defaults %&gt;</code> renders script tags for all files in <code>app/public/javascripts/</code></li>
<li>`&lt;%= csrf_meta_tag %> adds some stuff to prevent cross-site-meta-request-forgery hacking (people injecting their own HTML into comments etc)</li>
<li><code>&lt;%= link_to thing.name, thing_path(thing) %&gt;</code> (first param is link text, second URL). Can use the entity itself instead of <code>thing_path(thing)</code></li>
</ul>
</li>
</ul>


<p>Sample <code>index.html.erb</code> (create a link to this with <code>things_path</code>):</p>

<figure class='code'><figcaption><span>An example &#8216;things&#8217; view template</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;ul&gt;</span>
</span><span class='line'><span class="x">&lt;!-- @things set up in controller --&gt;</span>
</span><span class='line'><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Home&quot;</span><span class="p">,</span> <span class="n">root_path</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">if</span> <span class="vi">@things</span><span class="o">.</span><span class="n">empty?</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">   No things yet</span>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">else</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">   </span><span class="cp">&lt;%</span> <span class="vi">@things</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">thing</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      &lt;li&gt;</span>
</span><span class='line'><span class="x">         </span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="n">thing</span><span class="o">.</span><span class="n">status</span><span class="p">,</span> <span class="n">thing</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">         </span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Edit&quot;</span><span class="p">,</span> <span class="n">edit_thing_path</span><span class="p">(</span><span class="n">thing</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">         </span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Delete&quot;</span><span class="p">,</span> <span class="n">thing</span><span class="p">,</span> <span class="ss">:method</span> <span class="o">=&gt;</span> <span class="ss">:delete</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      &lt;/li&gt;</span>
</span><span class='line'><span class="x">   </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;+&quot;</span><span class="p">,</span> <span class="n">new_thing_path</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Controllers</h4>

<ul>
<li><code>thing</code> controller definition goes in <code>app/controllers/things_controller.rb</code>_</li>
</ul>


<figure class='code'><figcaption><span>A &#8216;things&#8217; controller, responsible for setting view state</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ThingsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>   <span class="c1"># common code, called by all actions</span>
</span><span class='line'>   <span class="n">before_filter</span> <span class="ss">:get_thing</span><span class="p">,</span> <span class="ss">:only</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:edit</span><span class="p">,</span> <span class="ss">:update</span><span class="p">,</span> <span class="ss">:destroy</span><span class="o">]</span>
</span><span class='line'>   <span class="n">before_filter</span> <span class="ss">:check_auth</span><span class="p">,</span> <span class="ss">:only</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:edit</span><span class="p">,</span> <span class="ss">:update</span><span class="p">,</span> <span class="ss">:destroy</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">def</span> <span class="nf">get_thing</span> <span class="c1"># called by before_filter</span>
</span><span class='line'>      <span class="vi">@thing</span> <span class="o">=</span> <span class="no">Thing</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span> <span class="c1"># all URL query params are available</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">def</span> <span class="nf">check_auth</span> <span class="c1"># called by before_filter</span>
</span><span class='line'>      <span class="c1"># do auth verification (check &#39;if flash[:notice]&#39; in rendering page)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">session</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span> <span class="o">!=</span> <span class="vi">@thing</span><span class="o">.</span><span class="n">user_id</span>
</span><span class='line'>         <span class="c1"># flash[:notice] = &quot;Not authorized!&quot; </span>
</span><span class='line'>         <span class="n">redirect_to</span><span class="p">(</span><span class="n">things_path</span><span class="p">,</span> <span class="ss">:notice</span> <span class="o">=&gt;</span> <span class="s2">&quot;Not authorized!&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">def</span> <span class="nf">show</span>         <span class="c1"># show single </span>
</span><span class='line'>      <span class="c1"># set view state before rendering view</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">render</span> <span class="ss">:action</span> <span class="o">=&gt;</span> <span class="s1">&#39;myaction&#39;</span> <span class="c1"># to render different view (default &#39;show&#39;)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span> <span class="c1"># optional</span>
</span><span class='line'>         <span class="nb">format</span><span class="o">.</span><span class="n">html</span> <span class="c1"># myaction.html.erb</span>
</span><span class='line'>         <span class="nb">format</span><span class="o">.</span><span class="n">xml</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">:xml</span> <span class="o">=&gt;</span> <span class="vi">@thing</span> <span class="p">}</span>
</span><span class='line'>         <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">:json</span> <span class="o">=&gt;</span> <span class="vi">@thing</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">def</span> <span class="nf">edit</span><span class="p">;</span> <span class="k">end</span>    <span class="c1"># show &#39;edit&#39; form</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">def</span> <span class="nf">index</span>        <span class="c1"># list all</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">params</span><span class="o">[</span><span class="ss">:status</span><span class="o">]</span>
</span><span class='line'>         <span class="vi">@things</span> <span class="o">=</span> <span class="no">Thing</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">:status</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:status</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>         <span class="vi">@things</span> <span class="o">=</span> <span class="no">Thing</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">def</span> <span class="nf">new</span><span class="p">;</span> <span class="k">end</span>     <span class="c1"># show &#39;new&#39; form</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">def</span> <span class="nf">create</span>       <span class="c1"># create new</span>
</span><span class='line'>      <span class="c1"># expects params of the form { thing: {status: &#39;good&#39;, name: &#39;xxx&#39;} }</span>
</span><span class='line'>      <span class="vi">@thing</span> <span class="o">=</span> <span class="no">Thing</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:thing</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">redirect_to</span><span class="p">(</span><span class="vi">@thing</span><span class="p">)</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">def</span> <span class="nf">update</span><span class="p">;</span> <span class="k">end</span>  <span class="c1"># update</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">def</span> <span class="nf">destroy</span><span class="p">;</span> <span class="k">end</span> <span class="c1"># delete</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Routes</h4>

<ul>
<li>application routes defined in <code>app/config/routes.rb</code></li>
<li><code>resources</code> directive creates a full RESTful resource. This means that it will automatically create the following helpers and routes:

<ul>
<li><code>things_path</code> (/things &lsquo;index&rsquo; action)</li>
<li><code>thing</code> (/thing/id &lsquo;show&rsquo; action)</li>
<li><code>new_thing_path</code> (/things/new &lsquo;new&rsquo; action)</li>
<li><code>edit_thing_path(thing)</code> (/things/[id]/edit &lsquo;edit&rsquo; action)</li>
<li>&hellip; plus more</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">MyApp</span><span class="p">:</span><span class="ss">:Application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class='line'>   <span class="n">resources</span> <span class="ss">:things</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">match</span> <span class="s1">&#39;new_thing&#39;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Things#new&quot;</span> <span class="c1"># path =&gt; ControllerName=&gt;actionName</span>
</span><span class='line'>   <span class="n">match</span> <span class="s1">&#39;all&#39;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Things#index&quot;</span><span class="p">,</span> <span class="ss">:as</span> <span class="s2">&quot;all_things&quot;</span> <span class="c1"># create all_things_path helper for link_to etc</span>
</span><span class='line'>   <span class="c1"># alternative:</span>
</span><span class='line'>   <span class="n">match</span> <span class="s1">&#39;all&#39;</span> <span class="o">=&gt;</span> <span class="n">redirect</span><span class="p">(</span><span class="s1">&#39;/things&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1"># TODO: case sensitive? the tutorial seems confused on this</span>
</span><span class='line'>   <span class="n">root</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s2">&quot;Things#index&quot;</span> <span class="c1"># sets up &#39;/&#39; route to &#39;/things&#39;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">match</span> <span class="s1">&#39;status_things/:status&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Things#index&#39;</span> <span class="c1"># add :status controller params</span>
</span><span class='line'>   <span class="n">match</span> <span class="s1">&#39;:username&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Things#index&#39;</span><span class="p">,</span> <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="s1">&#39;user_things&#39;</span>
</span><span class='line'>   <span class="c1"># in view: &lt;%= link_to &#39;seshbot things&#39;, user_things_path(&#39;seshbot&#39;) %&gt;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This week in review: my game table web app]]></title>
    <link href="http://seshbot.com/blog/2014/01/11/this-week-in-review-the-game-table-web-app/"/>
    <updated>2014-01-11T11:19:08+09:00</updated>
    <id>http://seshbot.com/blog/2014/01/11/this-week-in-review-the-game-table-web-app</id>
    <content type="html"><![CDATA[<p>First here&rsquo;s a quick summary of what I got up to:</p>

<ol>
<li>trying to build a simple &lsquo;gaming table&rsquo; application in Ember.js,</li>
<li>styling with Twitter bootstrap,</li>
<li>messing with plugins in my blog (trying unsuccessfully to fix code highlighting, and adding a UML tool &ndash; see below)</li>
</ol>


<center><img src='http://seshbot.com/images/plantuml/7f148dfb8d968e365103d42622a30b55.png'></center>


<p>I spent most of my time learning about Ember. <a href="http://emberjs.com">Ember.js</a> is a very nice looking front-end MVC framework that has a very appealing <a href="http://emberjs.com/guides/">getting started guide</a> that make it look <em>super simple</em> to create a reactive application. Three things that people will not tell you however:</p>

<ul>
<li>demo videos only ever show the main usage scenario of that framework</li>
<li>most new frameworks change so often that they&rsquo;re either unstable or very little up-to-date documentation exists, and</li>
<li>many of the benefits they offer you probably won&rsquo;t end up using anyway, for various reasons</li>
</ul>


<p>For now though I&rsquo;ll go ahead with it because I feel that I&rsquo;m just about to start doing cool stuff in it (it kinda always feels like this though.)</p>

<p><strong>Next week</strong> I&rsquo;m thinking of switching back to some C++ stuff so I can dabble in a realm I&rsquo;m more comfortable with for a while&hellip; Monday is a public holiday in Japan though so I&rsquo;ll probably be wandering around and not programming much.</p>

<!-- more -->


<h3>Problem 1: binding non-nested components was difficult</h3>

<p>I figured I would devote my first day last week to creating the framework for a small Gaming Table application. Perhaps just start off with a quick chat client or sketching app. I was not accounting however for the vagaries of modern web application development, and I ended up messing around with stupid little problems for most of the week. Looking back I feel it was quite frustrating overall &ndash; it seems that many of these new techs do not quite work as advertised, if at all.</p>

<p>Most tutorials and documentation will usually only tell you about one way to make an ember app &ndash; showing the details of a single entity or collection of entities of the same type at a time. Perhaps it might be some blogging application that lets you dig down into various blog entries, or perhaps it will involve showing all the tweets from a particular tweeter. Whatever the demo, I&rsquo;m sure it will show you how to explore <em>a single concept</em>.</p>

<p>The first thing I wanted to do was to show your online friends on the left side and allow you to create or enter an existing chat room. I immediately got stuck on a stupid little problem however that I stubbornly refused to get past, leading to several wasted days.</p>

<p>My specific problem was <em>how can I make the nav bar show the name of the current gaming table (kind of like a chat room), but show some placeholder message if I&rsquo;m not in a room</em>. The problem being that the region dedicated to showing information about the current table (players, cards etc) is not a descendent hierarchically of the nav bar.</p>

<center><img src='http://seshbot.com/images/plantuml/3bdacfc29fd9e7e730d15e02ab13157c.png'></center>


<p>Long story short, the correct way seems to involve: 1) modifying the &lsquo;Nav Bar&rsquo; controller to add a dependency to the &lsquo;Game Table&rsquo; controller; 2) add to the Nav Bar controller an alias or dynamic property pointing to the Game Table controller (this is conceptually the last table loaded); and 3) creating another dynamic property in the Nav Bar controller that is updated whenever <code>currentPath</code> is updated, and returns <code>null</code> if the route (<code>currentRouteName</code>) is no longer a table.</p>

<p>This might make sense, but it was a pain in the ass to discover. (Side note: I&rsquo;m working on a general &lsquo;getting to know Ember.js&rsquo; post that goes into a lot more detail on this so others tackling the same problem might not have to spend as long as I spent on it.)</p>

<p><span class='pullquote-right' data-pullquote='all of the Ember help I found is out of date, and none of the code samples I found worked.'>
I&rsquo;m not saying the framework is terrible, but all of the Ember help I found is out of date, and none of the code samples I found worked. Ember only reached v1.0 4 months ago (Sept 2013) so any advice from before that period is probably out of date. Code samples will not work, and jsfiddle/jsbin apps will probably not run, which is a huge problem because that is how people communicate working code samples with each other in this community.
</span></p>

<p>I&rsquo;m concerned that the Ember docs might not cover enough real world scenarios that &lsquo;proper&rsquo; applications might encounter (e.g., several regions dedicated to different information.)</p>

<h3>Live Help in IRC! 1980&rsquo;s tech to the rescue</h3>

<p>The IRC channel is pretty awesome &ndash; the #emberjs channel of freenode.org is one of the most populated channels on the server, and I&rsquo;ve saved a lot of time by asking for help there.</p>

<p>I spent a long time digging through documentation on how to solve this problem before I turned to IRC. Then within 10 minutes I had someone giving me meaningful advice that I ended up using. The secret was that I went in there with a minimalistic example of my problem that they could mark up and fix for me. <a href="http://jsbin.com/UzaFUZE/1/edit?html,js,output">Here&rsquo;s</a> the code I gave them and <a href="http://jsbin.com/UzaFUZE/4/edit?html,js,output">here&rsquo;s</a> what they gave me.</p>

<h3>Hosting a backend</h3>

<p>I have been mainly concentrating on the front end functionality so far, so didn&rsquo;t want to spend too long messing around with the server side. I had originally decided that I&rsquo;d learn some rails, but decided to try out a &lsquo;no backend&rsquo; solution &ndash; in this case <a href="http://deployd.com">deployd</a>. The two criteria I was after were a simple REST API and some kind of authentication, both of which deployd ostensibly offers. There were a few hiccups though.</p>

<p>The first was that deployd is still actively being developed, so the web UI isn&rsquo;t totally intuative. I won&rsquo;t go too far into it but it has been a hassle.</p>

<p>The next problem is that although both Ember and Deployd declare that they speak standard REST JSON language, it turns out they don&rsquo;t agree on how that language should look. I had to mess around a fair amount and ask around on IRC before discovering that you need to apply your own serializer, that intercepts all remote data transfers and allows you to &lsquo;munge&rsquo; it a little into a format that Ember is happy with.</p>

<p>Again, I&rsquo;ll include the details of all this in a post dedicated to Ember later.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What's so hard about programming?]]></title>
    <link href="http://seshbot.com/blog/2014/01/06/whats-so-hard-about-programming/"/>
    <updated>2014-01-06T20:19:49+09:00</updated>
    <id>http://seshbot.com/blog/2014/01/06/whats-so-hard-about-programming</id>
    <content type="html"><![CDATA[<p>It is a fact that every programmer is the star of their peer group, and would spin out the most awesome cleanly-built apps if only he or she didn&rsquo;t have to work under these circumstances. It is also a fact that every programmer understands that they were terribly misguided just a few years prior.</p>

<p>Given these two facts, I would have to think a whole lot of myself to give advice on programming to other programmers. I happen to know however that I am in fact a better programmer than most, and am therefore uniquely qualified to offer such advice.</p>

<p>So here&rsquo;s some of the things I feel I&rsquo;ve learned the hard way &ndash; at least enough that every time I work on a project they jump to mind and guide my actions.</p>

<!-- more -->


<h3>Which are the best technologies?</h3>

<p>Programming languages are tricky to learn, and programmers have a vested interest in believing that the technologies they know best are the most appropriate technologies to use for every task. For the purposes of this article, those people will be known as <em>curmudgeons</em>.</p>

<p>Curmudgeons often avoid learning more than their one favourite language. I spent about 8 years programming exclusively in C++ before I finally took the jump to another language, and that point represented a refreshingly great learning curve for me. I love C++ but there&rsquo;s features that it simply does not have, so I&rsquo;ll demonstrate by talking about C++ from a curmudgeonly perspective.</p>

<p>C++ does not have reflection, and I used to (and still do) think that reflection can make code hard to understand and follow. However reflection is valuable during application bootstrapping for stringing together components at the highest level using dependency injection containers, for example.</p>

<p>C++ does not have garbage collection. I believe languages that use GC tend to make managing resources other than memory (locks, databases, etc) difficult, which in turn makes a lot of code difficult to deal with. However dealing with certain problems <em>without</em> GC can be very tricky or even impossible &ndash; typically anything where the lifetime of an entity cannot be easily identified at coding time, such as lambdas with closures, or <a href="http://en.wikipedia.org/wiki/Persistent_data_structure">&lsquo;persistent&rsquo; data structures</a> (a la <a href="http://clojure.org/data_structures">clojure&rsquo;s data structures</a>), or often many other situations in multi-threaded applications.</p>

<p>C++&rsquo;s standard libraries are incredibly low-level (you&rsquo;d look long and never find the word &lsquo;web&rsquo;, &lsquo;service&rsquo; or &lsquo;actor&rsquo;) and the standard is <em>incredibly</em> slow moving (only recently got threading support, lambdas or regular expressions!) However this is a side-effect of the fact that the language is intended to be long-lived, clearly something it&rsquo;s been very successful at.</p>

<p><span class='pullquote-right' data-pullquote='there are no crappy technologies - only situations where technologies are perhaps not applicable'>
So while I believe the functionality of these &lsquo;friendlier&rsquo; languages are often misused or are considered to solve problems they do not in fact solve well, I also know first-hand how awesome they can be in certain specific scenarios. I now believe that there are no crappy technologies &ndash; only situations where technologies are perhaps not applicable.
</span></p>

<p>Need super high performance? C or C++ is great if you know it really well, as an explicit goal of the language is that all features should come at no hidden cost, which is often a detriment to the language&rsquo;s simplicity. If you or the majority of your team is not familiar with the language however, it will probably not go well. If you are writing a large application, or need to quickly pump out a web service or componentised application, it simply might not be the right tool for the job.</p>

<p>It might be surprising but there are an equal number of curmudgeons using newer languages such as Java, JavaScript and Scala as well. While C++ curmudgeons will tell you that high-level facilities offered by new generation languages (GC etc) are not truly useful, higher-level language curmudgeons will tell you that the performance of their tools are equal, or somehow better than, lower-level languages. Actually, from the perspective that a well-maintained application tends to run smoother this is sometimes true. However from the truest apples-to-apples sense this is rarely the case.</p>

<p>As an example, an often-cited comparison is that between garbage collecting heap allocated memory and the typical semi-manual approach taken by C++. The argument comes down to the observation that scheduled mass-collection of heap memory is generally more efficient than many individual object heap de-allocations. But many programmers that rely on garbage collection would not be aware of stack-based allocation (the default in C++, unavailable in Java) which offers effectively free memory allcation and de-allocation. Or custom allocators, which are a kind of ad-hoc custom garbage collection which can also offer similar benefits in specific circumstances.</p>

<p>A smart programmer would believe that if a language was created, still exists and has a large user base, it probably has a good reason to be around. A programmer that understands more languages is almost by definition more well equipped to effectively tackle more varied problems.</p>

<h3>What&rsquo;s the difference between Analysis and Design?</h3>

<p>Many programmers don&rsquo;t separate the notion of analysis from design. In fact, it would be less charitable but more realistic to say that most programmers don&rsquo;t fully know what analysis is for.</p>

<p>The first step in any project is to understand the requirements &ndash; a process that requires a very thorough analysis phase. A thorough analysis will capture all requirements in a language comfortable to the client, create a domain model that the client agrees captures all of the concepts (entities, events, roles, etc) in the system, and give a good representation of the scope that is being tackled (a complete list of actors interacting and their useage scenarios the application will satisfy.) If you tackle a problem without this knowledge, you don&rsquo;t fully understand the problem and therefore are not yet qualified to fix it.</p>

<p><span class='pullquote-left' data-pullquote='Every requirement accurately captured represents a significant amount of effort saved'>
The agile principle of avoiding &lsquo;big design up-front&rsquo; leads people to avoid performing full analysis up front, which is very misguided. Every requirement accurately captured represents a significant amount of effort saved in large refactorings, or worse yet continual effort working around poorly designed systems.
</span></p>

<p>Analysis is important and should be done as completely as possible, lest the wrong application get built. Design is incremental but continual. While analysis documents tend to be fairly static and only change if the actual requirements change, design documents are often not useful much past the development of the code they relate to. For this reason they&rsquo;re usually only used for reasoning about and communicating a plan of attack for an upcoming component being created or worked on.</p>

<h3>Have we estimated enough time?</h3>

<p>Estimation is said to be the hardest part of programming. It <em>is</em> fricken hard. But usually it becomes much more approachable once the complete scope has been explored &ndash; if every piece of functionality to be delivered is decomposed into the smallest deliverable increments that the client can verify (often known as user stories in agile terminology), and these dozens or sometimes hundreds of stories can be individually and honestly estimated, a rough estimate may be reached.</p>

<p>More importantly however, when you find yourself part-way through stories of a project, you have the ability to re-evaluate your estimate of the remaining portion based on how long the first bit took. This process should replace all these &lsquo;double and add your grandmothers age&rsquo; type estimates, though they require some bravery both on behalf of the developers and the business people.</p>

<p>As a bonus, if the stories were separated into must-, should-, and might-haves, a certain amount of flexibility is built into the system where the portion to be delivered becomes negotiable based on revised estimates.</p>

<h3>Have we completed our design?</h3>

<p>Every time I design a new component I go through a few steps. I find that these are often not considered when estimating the time required to implement new functionality.</p>

<ul>
<li>most importantly, for every entity in the system <strong>consider how the entity will change over time</strong> &ndash; it&rsquo;s simple to represent an order in an online shopping system, but what if it gets cancelled or amended? What if the user account is deleted? What if an item is recalled by the manufacturer?</li>
<li><strong>how will the new component be administered and configured?</strong> This means APIs and user interfaces, which are not glamorous but need to be made.</li>
<li>when modeling the major entities, <strong>model all incoming commands and events</strong> as well &ndash; a good way to tell if there&rsquo;s an event missing is if two entities are relating directly to each other. This also yields heaps of other benefits (see <a href="http://martinfowler.com/eaaDev/EventSourcing.html">event sourcing</a> for example).</li>
<li><strong>separate each entity from the value data associated with that entity.</strong> Entities have identity and usually a long lifetime, and are changed many times throughout their life. Values can be compared trivially, serialised and deserialised and are thread-safe by virtue of being immutable facts.</li>
</ul>


<p>These topics are actually huge but these most readily to mind, expressed as minimalistically as I thought possible.</p>

<h3>Is UML necessary?</h3>

<p>This concept might be a little anachronystic these days as I don&rsquo;t see many people jumping on the UML bandwagon anymore &ndash; if anything it&rsquo;s swung the other way, which is no better really. But it can seem sometimes that UML is some kind of all-or-none proposition.</p>

<p>Many treat UML as a kind of <em>process</em>, when in fact it is a collection of <em>languages</em>. And like any language, it is there to be used primarily for communication. It makes little sense to have a process that revolves around UML per se, but I find that certain diagrams are arguably the best way to express certain ideas.</p>

<p><u><em>During analysis</em></u>: <strong>use-case diagrams</strong> are great for outlining scope; <strong>domain models</strong> are fantastic for discovering the main concepts in a system and are great to carry to early client meetings; and <strong>state diagrams</strong> can <em>really</em> save a lot of time later on down the line (entity states are deceptively tricky to discover.)</p>

<p><u><em>During design</em></u>: these are totally situational, but <strong>component diagrams</strong> show how all the services and applications hang together, where message busses are and how high-availability and how other such architectural concerns are handled; I often find myself sketching out <strong>class diagrams</strong> aplenty to provoke discussions on my immediate plans; and I email tons of <strong>sequence diagrams</strong> around indicating the intricate details on how components coordinate their interactions.</p>

<p>In all, UML is neither good nor bad, it is a set of tools you may decide to use when communicating about software. Objecting to them on principle is like objecting to the written language on principle.</p>

<h3>Will Design Patterns save us?</h3>

<p>There are a lot of good books out there detailing a lot of good design patterns. These patterns take many forms but there is a common unifying factor of all of them &ndash; they don&rsquo;t actually do anything by themselves (otherwise they&rsquo;d be applications or services.) They can be very useful for two purposes &ndash; describing the design of a system to others, or reason about how a part of a problem might decompose into a set of entities, values and relationships.</p>

<p>The problem comes in when the design patterns book comes out as the first step in creating a new application. No matter the problem, the first step should always be to understand the problem through <em>analysis</em>, and then the first step of design should be something like figuring out the major components in the system or the data in/out and transforms, depending on the situation. The design patterns emerge from this process, and the books are useful for recognising them, not guiding the design process.</p>

<p>Interestingly, design patterns are more important to imperative languages than declarative ones &ndash; imperative languages are by their nature higher level and the abstractions that design pattern books enumerate tend to fall out much more naturally without a lot of effort. Functional language curmudgeons are oft quoted as saying that design patterns are missing language features. I&rsquo;m not entirely convinced of this perspective, but it does show how genuinely powerful those languages are at expressing high level concepts simply.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript in Modern Web Apps]]></title>
    <link href="http://seshbot.com/blog/2014/01/03/javascript-in-modern-web-apps/"/>
    <updated>2014-01-03T23:20:08+09:00</updated>
    <id>http://seshbot.com/blog/2014/01/03/javascript-in-modern-web-apps</id>
    <content type="html"><![CDATA[<p>The web development scene has moved dramatically since my own minor experience at an Internet business company 14 years ago. Back then we created <em>web pages</em> in ColdFusion/PHP/ASP marked-up HTML. Our main tools were frames and tables and a lot of homegrown convention to ensure headers/footers looked right. We spent most of our efforts on effectively using CSS to make our lives easier &ndash; not separating views from data or dynamically updating HTML elements.</p>

<p>People now create <em>web applications</em> instead of individual pages. Web apps look a lot like native applications, are responsive and dynamic, and have very high-level frameworks that provide application-wide abstractions for business models and the abstraction of the view logic.</p>

<p>This article describes my current understanding of the technologies used in constructing <em>modern</em> web applications, largely based on a few years&#8217; lurking on <a href="http://ycombinator.com">Hacker News</a> and a couple weeks&#8217; not-so-intense investigations.</p>

<!-- more -->


<h3>The importance of JavaScript</h3>

<p>Javascript is said to be the assembly language of the internet. It was created circa 1995 for Netscape Navigator 2.0 as part of a much grander vision for a global web platform. It is supported by all web browsers, and <a href="https://www.dartlang.org/">until recently</a> was the only language broadly enough available to do so.</p>

<p>Modern web applications are built many layers of abstraction on top of this. An extreme and relevant example of this is the <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest">XMLHttpRequest</a> (hereafter XHR) function. Prior to HTML5 WebSockets, all <a href="http://en.wikipedia.org/wiki/Single-page_application">single-page</a> web applications used this single function to receive dynamic updates from a remote server, through a technique commonly known as <a href="http://en.wikipedia.org/wiki/Ajax_%28programming%29">AJAX</a>. Likely few web apps actually use the function directly however &ndash; most these days use high-level <a href="http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">MVC frameworks</a> (more on these below) to connect the visual elements the user sees in their browser (the view) to entity abstractions updated from a remote server (the model).</p>

<p>It makes sense to me that any understanding of modern web applications would need to be partly underpinned by a solid understanding of JavaScript. It seems like a pretty icky language however, with a lot of weird behaviour ready to trip those unaware of its stupid idiosyncracies. Perhaps because it was <a href="http://www.computer.org/csdl/mags/co/2012/02/mco2012020007.html">rushed out in 10 days</a>.</p>

<p>Here&rsquo;s a few reading recommendations I would like to read one day:</p>

<ul>
<li><a href="http://eloquentjavascript.net/contents.html">Eloquent JavaScript</a> &ndash; basically an ebook that starts from the basics</li>
<li><a href="http://ejohn.org/apps/learn/">Learning Advanced JavaScript</a> &ndash; similar to above only presented as a slide deck with code samples</li>
<li><a href="http://news.ycombinator.com/item?id=3550998">Ask HN &ndash; JavaScript Dev Tools</a> &ndash; debugging in JavaScript</li>
<li><a href="http://michaux.ca/articles/mvc-architecture-for-javascript-applications">MVC Architecture for JS</a> &ndash; building an MVC framework in JS from scratch</li>
<li><a href="http://addyosmani.com/largescalejavascript/">Large-Scale JS Application Architecture</a> &ndash; a guy who knows his stuff on various approaches to building &lsquo;large&rsquo; web apps</li>
<li><a href="https://developer.mozilla.org/en-US/docs/JavaScript/Introduction_to_Object-Oriented_JavaScript">Mozilla Developer Network &ndash; Intro to OO JS</a> &ndash; everything you need to know on how <code>prototype</code> and <code>new</code> provide OO on top of simple JS function</li>
<li><a href="http://bonsaiden.github.com/JavaScript-Garden/#intro">JavaScript Garden</a> &ndash; a kind of FAQ on all the idiosyncracies of JS (how <code>this</code> works, for example)</li>
<li><a href="http://shichuan.github.io/javascript-patterns/">JavaScript Patterns</a> &ndash; a very nice looking reference on all facets of modern JS (including frameworks)</li>
<li><a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/">Learning JavaScript Design Patterns</a> &ndash; not sure if this is really useful yet, especially compared to the one directly above</li>
</ul>


<h3>JavaScript in the browser</h3>

<p>It&rsquo;s very difficult to figure out which of the myriad JS frameworks are worth investing in, as they come and go and are easily replacable. However some toolsets and frameworks have become totally indispensable timesavers to anyone making a web application.</p>

<ul>
<li><a href="http://jquery.com/">jQuery</a> &ndash; a low-level toolset that vastly simplifies common JS tasks such as manipulating the DOM and using XHR</li>
<li><a href="http://requirejs.org/">RequireJS</a> &ndash; a library that makes including third party modules simple</li>
<li><a href="http://handlebarsjs.com/">Handlebars</a> &ndash; a very popular template parser that uses <code>{{this}}</code> syntax</li>
<li><a href="http://backbonejs.org/">Backbone.js</a> &ndash; allows user-defined model objects to be dynamically linked up to HTML elements for automatic updates</li>
<li><a href="http://emberjs.com/">Ember.js</a> &ndash; an exciting MVC framework that I think is built on top of Handlebars and Backbone, or something like it. More below</li>
<li><a href="http://angularjs.org/">Angular.js</a> &ndash; a Google library that promises to deliver similar functionality as Ember.js, but with a syntax that is meant to look more like a natural extension of HTML</li>
</ul>


<h3>JavaScript on the server</h3>

<p>For some reason JavaScript has become a very popular language for performing server-side tasks as well. I think this has something to do with the recent popularity of the <a href="http://nodejs.org/">Node.js</a> JavaScript web application platform. Node was simplistic enough for people to write small but highly capable tools in a language with which they were already familiar. Regardless of the purpose, it is important to note that the fact that its use on the server side is largely unrelated to its
use in the browser.</p>

<p>I think I&rsquo;ll likely want to look into at least these frameworks:</p>

<ul>
<li><a href="https://npmjs.org/">npm</a> for javascript package installation</li>
<li><a href="http://yeoman.io/">Yeoman</a> provides a set of tools for creating and manipulating a web app on a workflow level</li>
<li><a href="http://bower.io/">Bower</a> for application dependency management. It automatically downloads and configures dependent frameworks for an app</li>
<li><a href="http://gruntjs.com/">Grunt</a> for running preconfigured tasks from a Gruntfile. For example running, testing and previewing web apps</li>
</ul>


<p>As an example of these technologies, here&rsquo;s what it takes to create a basic Ember.js application (a more in-depth starter can be found <a href="http://blog.embed.ly/post/46586649344/introduction-to-ember-development">here</a>):</p>

<figure class='code'><figcaption><span>Creating a new Ember.js application from scratch</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># install pre-requisite apps to your machine</span>
</span><span class='line'>apt-get install npm
</span><span class='line'>npm install -g yo grunt-cli bower
</span><span class='line'>npm install -g grunt-contrib-compass
</span><span class='line'>npm install -g generator-ember
</span><span class='line'>npm install -g grunt-mocha
</span><span class='line'>
</span><span class='line'>mkdir myapp <span class="o">&amp;&amp;</span> <span class="nb">cd </span>myapp
</span><span class='line'>yo ember       <span class="c"># create the application framework</span>
</span><span class='line'>bower install  <span class="c"># download pre-requisite libraries</span>
</span><span class='line'>grunt server   <span class="c"># start app on localhost:8000</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Serving and hosting web apps</h3>

<p>I&rsquo;ve been concentrating mostly on the browser end of the web application architecture equation. So far my thoughts on the matter of hosting haven&rsquo;t really gone too far. Two obvious options come to mind however.</p>

<p><strong>A Yeoman-generated Application</strong> that I think by default uses a simple web server like <a href="http://unicorn.bogomips.org/">Unicorn</a>, started from a Grunt script. There are plenty of instructions on the web for deploying these applications to Heroku or other hosting services.</p>

<p><strong>A Rails RESTful Application</strong> hosted on something like <abbr title="Amazon Web Services">AWS</abbr>. Ruby on Rails is a hefty web framework that also follows the MVC framework. I think it&rsquo;s a full-stack framework in its own right and prefers its own HTML templating engine. I intend to use it to expose a REST API instead of HTML however so I can totally separate the server logic from the UI framework, and perhaps write separate front-ends altogether.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Grand Experiment]]></title>
    <link href="http://seshbot.com/blog/2013/12/20/the-grand-experiment/"/>
    <updated>2013-12-20T10:07:06+09:00</updated>
    <id>http://seshbot.com/blog/2013/12/20/the-grand-experiment</id>
    <content type="html"><![CDATA[<p>A few months ago I decided to hand in my notice and live off my savings for a while. In 13 years of software development this is the first proper hiatus I&rsquo;ve taken so I have no idea what to expect.</p>

<p>I intend to spend the next six to twelve months attempting to see what happens when I have time to myself.</p>

<!-- more -->


<h3>So far&hellip;.</h3>

<p>This is only the first week of my grand experiment. So far I have spent most of it gaming with my other unemployed friends (Pathfinder card game is awesome.) I did set up this blog however, and register seshbot.com, so I suppose it&rsquo;s not a complete loss work-wise.</p>

<h3>Blogging</h3>

<p>I&rsquo;m excited about following an open development process. Source code is only a part of an application however, the analysis and design are integral pieces that I would like to make visible. I am concerned that setting up this blog before I have anything to show is setting the cart before the horse, but it seemed like the smallest most approachable project I could scope out for the first week.</p>

<p>The Octopress platform seems very developer-friendly. I can trivially embed syntax highlighted source code snippets and extend the framework through a simple plugin mechanism (I think.) There is no fancy web UI for composing posts &ndash; its all authoring markup on your local machine then pushing the generated code to github and letting github pages take care of the rest. Writing a new blog post is a matter of:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; <span class="nb">cd </span>seshbot
</span><span class='line'>&gt; rake new_post<span class="o">[</span><span class="s1">&#39;My New Post!&#39;</span><span class="o">]</span>
</span><span class='line'><span class="c"># Creating new post: source/_posts/2013-12-20-my-new-post.markdown</span>
</span><span class='line'>&gt; vim <span class="nb">source</span>/_posts/2013-12-20-my-new-post.markdown
</span><span class='line'>&gt; rake generate
</span><span class='line'><span class="c"># Successfully generated site: source -&gt; public</span>
</span><span class='line'>&gt; rake deploy
</span><span class='line'><span class="c"># Generating Site with Jekyll</span>
</span><span class='line'><span class="c"># Copying public to _deploy</span>
</span><span class='line'><span class="c"># Pushing generated _deploy website</span>
</span><span class='line'><span class="c"># Github Pages deploy complete</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s of course so much more you can do (preview it locally before uploading for example) but that&rsquo;s the basic workflow.</p>

<h3>Project</h3>

<p>I have a bunch of stuff I want to mess with, but I intend to start writing a few simple web applications. I have in mind some kind of Ruby-on-Rails stack using <a href="http://emberjs.com/">Ember.js</a> for the browser&rsquo;s UI modeling. A shared drawing application perhaps?</p>

<p>Also, I would love to mess around more with C++11/C++14, I have played a little so far and have been very impressed with the productivity and conciseness it affords (it&rsquo;s about time!) A little network game perhaps? I really would love to make a little modular adventure game at some stage. Who knows, perhaps I will be the one to finally make a nice graphical <a href="http://www.bay12games.com/dwarves/">Dwarf Fortress</a> clone? That seems to be the indy gaming unicorn.</p>

<h3>Japan Lifestyle</h3>

<p>So far I have been fortunate but it can be frustrating at times. Living in Japan without a job is a little challenging, though I suspect that would be true in most countries. The immediate challenges are keeping my house (I must renew my lease and they weren&rsquo;t too impressed with the blank &lsquo;employment&rsquo; section of the document) and preparing to pay the various taxes &ndash; most notably residential tax and health insurance, both of which are means-based on the previous years income.</p>

<p>I was very happy to discover that just around the corner from my house is a little cafe run by a very friendly independent game-developer &ndash; <a href="http://picopicocafe.com">PicoPico cafe</a>. Once a month they hold &lsquo;PicoTachi&rsquo;, an event for independent developers (and anyone else really) to show off stuff they&rsquo;ve been working on. That seems almost too fortuitous! I am also looking forward to working in the cafe by myself, it has a very nice ambiance.</p>
]]></content>
  </entry>
  
</feed>
