THE TEMPTING PIT OF DESPAIR: NEW TECHNOLOGIES

even once you learn rails, you probably have to learn the idiosyncracies of each major version...


EMBER NOTES

good stuff
- reactive/single page
- uses urls and browser history to make a nice experience
- very similar to rails
- active community (great IRC channel)
- coding by convention means you can get lots out with little code

bad stuff
- still working on stuff
 - no real-time streaming (yet)
 - managing entity relationships difficult (yet)
 - RestAdapter still in progress
 - coding by convention means you need to know a lot to do anything

recommendation
- use the reference a lot - look at 'methods', 'properties' and 'events' on API guide

Rails ActiveModel serializers created by ember guys to ensure Rails emits JSON that is well-formatted for Ember

Ember data models are 'record arrays' which have `isLoaded` property built in.

Unit Testing in QUnit? Any testing is fine, but qunit made with ember in min. Capybara is apparently also good for acceptance testing.

Data hooks:

- Adapter: save, shouldCommit, updateRecord, deleteRecord, createRecord, find, findMany, findQuery, findAll

- Serializer: toJSON, materializeRecord, materializeAttribute, extractAttribute, keyForAttributeName, keyForHasMany, extractKeyForBelongsTo, map, registerTransform

some good best practices outlined here: http://blog.embed.ly/post/56537323314/building-apps-with-ember-a-postmortem

http://mcdowall.info/posts/ember-application-initializers/

use canary in chrome to assist debugging

resources ==> {{outlet}} (nesting routes map to nested outlets)

RESTAdapter cannot represent 'nested' resources https://github.com/emberjs/data/issues/186

relationships difficult to manage: https://github.com/emberjs/data/issues/866
http://discuss.emberjs.com/t/ember-data-1-0-0-beta-code-snippets-on-how-to-use-a-hasmany-relationship/2587


Loading code async: https://gist.github.com/machty/5647589
App.ArticlesRoute = Ember.Route.extend({
  beforeModel: function() {
    if (!App.Article) {
      return $.getScript('/articles_code.js');
    }
  }
});




RAILS NOTES:

has_many :players, :dependent => :destroy

adding authentication gives all your controllers a 'currentUser' that you use for authorization purposes later

learn the 'Rails DSL' and use 'rails console' to help with debugging

RAILS API

rails routes.rb:

namespace :api do
  namespace :v1 do
      resources :stories, only: :index
  end
end

ember:

DS.RESTAdapter.reopen
  namespace: 'api/v1'


EMBER CONTAINER ANIMATION (WITH VIEWS)
http://www.robharper.ca/ember-on-mobile/animation.html


EMBER AND RAILS API

http://reefpoints.dockyard.com/ember/2013/01/07/building-an-ember-app-with-rails-api-part-1.html


EMBER REAL-TIME

firebase: https://github.com/sandersonet/ember-data-firebase
rails websockets: https://github.com/websocket-rails/websocket-rails
em-websocket and tutorial: https://github.com/igrigorik/em-websocket http://www.igvita.com/2009/12/22/ruby-websockets-tcp-for-the-browser/
Rails 4 has streaming: Live and Stream: http://slid.es/bcardarella/real-time-rails
 - no heroku support?
From chat below: side-loading? identity map?
manual polling: http://awardwinningfjords.com/2011/12/27/emberjs-collections.html


tokyopaul
how do people make 'live' ember apps that get updates pushed from the server - long-polling or websockets or something?
do the activemodel adapters take care of any of this?
I have seen that the firebase adapters can do this...

jakecraige
i don't think ember-data has realtime build in

darthdeus
you can just sideload the data into ED

tokyopaul
like, any chat client application would surely need something like that
perhaps its easy enough to sideload though - Ill look into that

darthdeus
it is built-in, via sideloading ... or you can have a separate adapter for websockets
sideloading is acutally very flexible
or you can use something like ember-model, which has much easier architecture and makes plugging in custom sideloading logic easier
i'm not sure if you won't run into conflicts in ED, i havne't used the latest couple of versions

Obi_obi
tokyopaul check out this https://www.firebase.com/blog/2013-10-22-firebase-bindings-for-ember.html

darthdeus
basically all it does is that you give it data and it loads it into the identity map


http://stackoverflow.com/questions/10535007/how-to-integrate-websocket-with-emberjs 
  - and then follow on (pushPayload) http://stackoverflow.com/questions/19719969/ember-data-websocket-adapter
  - pushPayload example: http://stackoverflow.com/questions/19373446/how-to-hit-non-rest-endpoints-with-ember-data-1-0-beta

Ember Data supporting real-time updates (plus some info):
  - http://discuss.emberjs.com/t/will-ember-data-support-full-real-time-updates/883



RAILS 4 and EMBER integration
http://www.railsonmaui.com/blog/2013/06/11/emberjs-rails4-tutorial/
extends on the yehuda katz demonstration where he builds a simple blogging app - adds a rails backend to it.

RAILS THINGS TO REMEMBER

use rubymine editor

CSRF protection - prevent people injecting their own forms into your application (many web apps run third party forms intentionally!)
overview: http://www.youtube.com/watch?v=2Ex8EEv-WPs



scaffold: model, database migration for that model, controller to manipulate it, views to view and manipulate the data

assets     | asset name (can use path as 'parent/name')                       | new asset placeholders
controller | controller name and views (can use modle as 'parent_module/controller') | controllers and views (and helpers)
helper     | helper name (can use module as 'parent_module/controller')       | helper
migration  | migration name and field information (types and index)           | migration
model      | model name and field information (types and index) (also module) | model, migration, fixture
resource   | resource name and field information                              | empty model and controller (RESTful) 
scaffold   | model name and field information (types and index)               | model, migration, controller and views
serializer | resource name and fields                                         | serializer
task       | namespace name and tasks                                         | new rake task stub

The two big ones are `resource` and `scaffold`, although apparently once you're comfortable with rails you tend to generate models, views and controllers individually. Scaffold creates basic implementations of all the CRUD operations.



relationships: rails people dont know what 'one-to-one' means
 - http://guides.rubyonrails.org/association_basics.html
 - page has-a book is 1-1??? http://requiremind.com/differences-between-has-one-and-belongs-to-in-ruby-on-rails/

apparently 'has-one' must be used in conjunction with 'belongs-to', enforcing an actual 1-1 relationship. 'has-one' implies that there is a foreign key on another model, whereas 'belongs-to' places a foreign key on this model and doesn't place restrictions on the other model at all. unfortunately these names do not indicate directionality so 'has-one' would be more usefully named 'one-to-one' or 'composed-of-one' (it implies that youll want to create them together) and 'belongs-to' would be better as 'belongs-to-one' (the foreign key can only point to one foreign entity)

So I guess if you want to create a new model with a reference to another entity but do not want to modify that other entity, you should use 'belongs-to'
see http://duanesbrain.blogspot.jp/2006/05/ruby-on-rails-hasone-versus-belongsto.html

When adding relationships at model declaration time the migration script will be created for you. If adding later you have to remember to create the migration later. In that case its better to create the migration first (using the `reference` data type) and manually modify the model yourself.

Think in terms of creating a new object of that type. 'has-one' implies that you will create the related object, yet 'belongs-to' implies that the other object already exists so it just has to link it up

Why use relationships? because they allow nice syntax when using the Ruby DSL (user.create_post, post.find(commentId) or whatever)




debugging super useful 

routing: http://guides.rubyonrails.org/routing.html

routes separate to model - can represent nested model relationships accurately on nested route resources.

auth: 
 - http://www.robertsosinski.com/2008/02/23/simple-and-restful-authentication-for-ruby-on-rails/
 - instructions using _devise_ https://github.com/heartsentwined/ember-auth-rails-demo/wiki

comment out coffee-rails and turbolinks

creating model:
rails g resource user name:string username:string encrypted_password:string salt:string


rake db:drop
rake db:create
rake db:migrate


TESTING

http://ruby.railstutorial.org/chapters/static-pages


PRODUCTION
===

use proper auth: http://coderberry.me/blog/2013/07/08/authentication-with-emberjs-part-1/
(dont store passwords, timeout, track sessions, use http auth headers)

protect data in routes if not meant to be exposed

do not check in sensitive information to version control




GRAPHICS
===

http://www.reddit.com/r/gamedev/comments/1vr2yp/where_to_find_awesome_particle_textures/


RAILS ADMIN PANEL
===

http://everydayrails.com/2012/07/31/rails-admin-panel-from-scratch.html
http://everydayrails.com/2012/08/07/rails-admin-panel-from-scratch-2.html
http://everydayrails.com/2012/08/19/rails-admin-panel-from-scratch-3.markdown.html



IMPRESSIONS
===

new - cant do many simple things (real time)
